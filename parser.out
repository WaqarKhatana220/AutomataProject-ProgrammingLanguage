Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    EQUALEQUAL
    GREATERTHAN
    GREATERTHANEQUALTO
    LESSTHAN
    LESSTHANEQUALTO
    MINUSMINUS
    MODULUS
    NOT
    NOTEQUAL
    OR
    PLUSPLUS
    POWER

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     S -> <empty>
Rule 3     stmt -> PRINT LPAREN exp RPAREN SEMICOLON
Rule 4     exp -> exp PLUS exp
Rule 5     exp -> exp MINUS exp
Rule 6     exp -> exp DIVIDE exp
Rule 7     exp -> exp MULTIPLY exp
Rule 8     exp -> exp COMMA exp
Rule 9     exp -> INT
Rule 10    exp -> FLOAT
Rule 11    exp -> STRING
Rule 12    exp -> CHAR
Rule 13    exp -> BOOL
Rule 14    exp -> NAME
Rule 15    stmt -> DTYPE NAME EQUAL exp SEMICOLON
Rule 16    DTYPE -> int
Rule 17    DTYPE -> string
Rule 18    DTYPE -> float
Rule 19    DTYPE -> bool
Rule 20    DTYPE -> char
Rule 21    stmt -> NAME EQUAL exp SEMICOLON

Terminals, with rules where they appear

AND                  : 
BOOL                 : 13
CHAR                 : 12
COMMA                : 8
DIVIDE               : 6
EQUAL                : 15 21
EQUALEQUAL           : 
FLOAT                : 10
GREATERTHAN          : 
GREATERTHANEQUALTO   : 
INT                  : 9
LESSTHAN             : 
LESSTHANEQUALTO      : 
LPAREN               : 3
MINUS                : 5
MINUSMINUS           : 
MODULUS              : 
MULTIPLY             : 7
NAME                 : 14 15 21
NOT                  : 
NOTEQUAL             : 
OR                   : 
PLUS                 : 4
PLUSPLUS             : 
POWER                : 
PRINT                : 3
RPAREN               : 3
SEMICOLON            : 3 15 21
STRING               : 11
bool                 : 19
char                 : 20
error                : 
float                : 18
int                  : 16
string               : 17

Nonterminals, with rules where they appear

DTYPE                : 15
S                    : 1 0
exp                  : 3 4 4 5 5 6 6 7 7 8 8 15 21
stmt                 : 1

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (15) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (21) stmt -> . NAME EQUAL exp SEMICOLON
    (16) DTYPE -> . int
    (17) DTYPE -> . string
    (18) DTYPE -> . float
    (19) DTYPE -> . bool
    (20) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    NAME            shift and go to state 5
    int             shift and go to state 6
    string          shift and go to state 7
    float           shift and go to state 8
    bool            shift and go to state 9
    char            shift and go to state 10

    S                              shift and go to state 1
    stmt                           shift and go to state 2
    DTYPE                          shift and go to state 4

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (15) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (21) stmt -> . NAME EQUAL exp SEMICOLON
    (16) DTYPE -> . int
    (17) DTYPE -> . string
    (18) DTYPE -> . float
    (19) DTYPE -> . bool
    (20) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    NAME            shift and go to state 5
    int             shift and go to state 6
    string          shift and go to state 7
    float           shift and go to state 8
    bool            shift and go to state 9
    char            shift and go to state 10

    stmt                           shift and go to state 2
    S                              shift and go to state 11
    DTYPE                          shift and go to state 4

state 3

    (3) stmt -> PRINT . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 12


state 4

    (15) stmt -> DTYPE . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 13


state 5

    (21) stmt -> NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 14


state 6

    (16) DTYPE -> int .

    NAME            reduce using rule 16 (DTYPE -> int .)


state 7

    (17) DTYPE -> string .

    NAME            reduce using rule 17 (DTYPE -> string .)


state 8

    (18) DTYPE -> float .

    NAME            reduce using rule 18 (DTYPE -> float .)


state 9

    (19) DTYPE -> bool .

    NAME            reduce using rule 19 (DTYPE -> bool .)


state 10

    (20) DTYPE -> char .

    NAME            reduce using rule 20 (DTYPE -> char .)


state 11

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)


state 12

    (3) stmt -> PRINT LPAREN . exp RPAREN SEMICOLON
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 15

state 13

    (15) stmt -> DTYPE NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 22


state 14

    (21) stmt -> NAME EQUAL . exp SEMICOLON
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 23

state 15

    (3) stmt -> PRINT LPAREN exp . RPAREN SEMICOLON
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

    RPAREN          shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29


state 16

    (9) exp -> INT .

    RPAREN          reduce using rule 9 (exp -> INT .)
    PLUS            reduce using rule 9 (exp -> INT .)
    MINUS           reduce using rule 9 (exp -> INT .)
    DIVIDE          reduce using rule 9 (exp -> INT .)
    MULTIPLY        reduce using rule 9 (exp -> INT .)
    COMMA           reduce using rule 9 (exp -> INT .)
    SEMICOLON       reduce using rule 9 (exp -> INT .)


state 17

    (10) exp -> FLOAT .

    RPAREN          reduce using rule 10 (exp -> FLOAT .)
    PLUS            reduce using rule 10 (exp -> FLOAT .)
    MINUS           reduce using rule 10 (exp -> FLOAT .)
    DIVIDE          reduce using rule 10 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 10 (exp -> FLOAT .)
    COMMA           reduce using rule 10 (exp -> FLOAT .)
    SEMICOLON       reduce using rule 10 (exp -> FLOAT .)


state 18

    (11) exp -> STRING .

    RPAREN          reduce using rule 11 (exp -> STRING .)
    PLUS            reduce using rule 11 (exp -> STRING .)
    MINUS           reduce using rule 11 (exp -> STRING .)
    DIVIDE          reduce using rule 11 (exp -> STRING .)
    MULTIPLY        reduce using rule 11 (exp -> STRING .)
    COMMA           reduce using rule 11 (exp -> STRING .)
    SEMICOLON       reduce using rule 11 (exp -> STRING .)


state 19

    (12) exp -> CHAR .

    RPAREN          reduce using rule 12 (exp -> CHAR .)
    PLUS            reduce using rule 12 (exp -> CHAR .)
    MINUS           reduce using rule 12 (exp -> CHAR .)
    DIVIDE          reduce using rule 12 (exp -> CHAR .)
    MULTIPLY        reduce using rule 12 (exp -> CHAR .)
    COMMA           reduce using rule 12 (exp -> CHAR .)
    SEMICOLON       reduce using rule 12 (exp -> CHAR .)


state 20

    (13) exp -> BOOL .

    RPAREN          reduce using rule 13 (exp -> BOOL .)
    PLUS            reduce using rule 13 (exp -> BOOL .)
    MINUS           reduce using rule 13 (exp -> BOOL .)
    DIVIDE          reduce using rule 13 (exp -> BOOL .)
    MULTIPLY        reduce using rule 13 (exp -> BOOL .)
    COMMA           reduce using rule 13 (exp -> BOOL .)
    SEMICOLON       reduce using rule 13 (exp -> BOOL .)


state 21

    (14) exp -> NAME .

    RPAREN          reduce using rule 14 (exp -> NAME .)
    PLUS            reduce using rule 14 (exp -> NAME .)
    MINUS           reduce using rule 14 (exp -> NAME .)
    DIVIDE          reduce using rule 14 (exp -> NAME .)
    MULTIPLY        reduce using rule 14 (exp -> NAME .)
    COMMA           reduce using rule 14 (exp -> NAME .)
    SEMICOLON       reduce using rule 14 (exp -> NAME .)


state 22

    (15) stmt -> DTYPE NAME EQUAL . exp SEMICOLON
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 30

state 23

    (21) stmt -> NAME EQUAL exp . SEMICOLON
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 31
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29


state 24

    (3) stmt -> PRINT LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 32


state 25

    (4) exp -> exp PLUS . exp
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 33

state 26

    (5) exp -> exp MINUS . exp
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 34

state 27

    (6) exp -> exp DIVIDE . exp
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 35

state 28

    (7) exp -> exp MULTIPLY . exp
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 36

state 29

    (8) exp -> exp COMMA . exp
    (4) exp -> . exp PLUS exp
    (5) exp -> . exp MINUS exp
    (6) exp -> . exp DIVIDE exp
    (7) exp -> . exp MULTIPLY exp
    (8) exp -> . exp COMMA exp
    (9) exp -> . INT
    (10) exp -> . FLOAT
    (11) exp -> . STRING
    (12) exp -> . CHAR
    (13) exp -> . BOOL
    (14) exp -> . NAME

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20
    NAME            shift and go to state 21

    exp                            shift and go to state 37

state 30

    (15) stmt -> DTYPE NAME EQUAL exp . SEMICOLON
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 38
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29


state 31

    (21) stmt -> NAME EQUAL exp SEMICOLON .

    PRINT           reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 21 (stmt -> NAME EQUAL exp SEMICOLON .)


state 32

    (3) stmt -> PRINT LPAREN exp RPAREN SEMICOLON .

    PRINT           reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    NAME            reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    int             reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    string          reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    float           reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    bool            reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    char            reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    $end            reduce using rule 3 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)


state 33

    (4) exp -> exp PLUS exp .
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 4 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 4 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29

  ! PLUS            [ reduce using rule 4 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 4 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 4 (exp -> exp PLUS exp .) ]
  ! MULTIPLY        [ reduce using rule 4 (exp -> exp PLUS exp .) ]
  ! COMMA           [ reduce using rule 4 (exp -> exp PLUS exp .) ]


state 34

    (5) exp -> exp MINUS exp .
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 5 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 5 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29

  ! PLUS            [ reduce using rule 5 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 5 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 5 (exp -> exp MINUS exp .) ]
  ! MULTIPLY        [ reduce using rule 5 (exp -> exp MINUS exp .) ]
  ! COMMA           [ reduce using rule 5 (exp -> exp MINUS exp .) ]


state 35

    (6) exp -> exp DIVIDE exp .
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 6 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 6 (exp -> exp DIVIDE exp .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29

  ! PLUS            [ reduce using rule 6 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 6 (exp -> exp DIVIDE exp .) ]
  ! DIVIDE          [ reduce using rule 6 (exp -> exp DIVIDE exp .) ]
  ! MULTIPLY        [ reduce using rule 6 (exp -> exp DIVIDE exp .) ]
  ! COMMA           [ reduce using rule 6 (exp -> exp DIVIDE exp .) ]


state 36

    (7) exp -> exp MULTIPLY exp .
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 7 (exp -> exp MULTIPLY exp .)
    SEMICOLON       reduce using rule 7 (exp -> exp MULTIPLY exp .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29

  ! PLUS            [ reduce using rule 7 (exp -> exp MULTIPLY exp .) ]
  ! MINUS           [ reduce using rule 7 (exp -> exp MULTIPLY exp .) ]
  ! DIVIDE          [ reduce using rule 7 (exp -> exp MULTIPLY exp .) ]
  ! MULTIPLY        [ reduce using rule 7 (exp -> exp MULTIPLY exp .) ]
  ! COMMA           [ reduce using rule 7 (exp -> exp MULTIPLY exp .) ]


state 37

    (8) exp -> exp COMMA exp .
    (4) exp -> exp . PLUS exp
    (5) exp -> exp . MINUS exp
    (6) exp -> exp . DIVIDE exp
    (7) exp -> exp . MULTIPLY exp
    (8) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 8 (exp -> exp COMMA exp .)
    SEMICOLON       reduce using rule 8 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    DIVIDE          shift and go to state 27
    MULTIPLY        shift and go to state 28
    COMMA           shift and go to state 29

  ! PLUS            [ reduce using rule 8 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 8 (exp -> exp COMMA exp .) ]
  ! DIVIDE          [ reduce using rule 8 (exp -> exp COMMA exp .) ]
  ! MULTIPLY        [ reduce using rule 8 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 8 (exp -> exp COMMA exp .) ]


state 38

    (15) stmt -> DTYPE NAME EQUAL exp SEMICOLON .

    PRINT           reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 15 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 33 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 34 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 35 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 36 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 37 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 37 resolved as shift
