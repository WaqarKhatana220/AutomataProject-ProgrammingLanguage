Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STEP

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     S -> <empty>
Rule 3     stmt -> STRUCT NAME LCBRACKET statement RCBRACKET
Rule 4     statement -> DTYPE NAME SEMICOLON statement
Rule 5     statement -> <empty>
Rule 6     stmt -> NAME NAME SEMICOLON
Rule 7     stmt -> NAME ARROW NAME EQUAL exp SEMICOLON
Rule 8     stmt -> NAME operator SEMICOLON
Rule 9     operator -> PLUSPLUS
Rule 10    operator -> MINUSMINUS
Rule 11    stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
Rule 12    stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
Rule 13    stmt -> ELSE LCBRACKET stmt RCBRACKET
Rule 14    stmt -> PRINT LPAREN exp RPAREN SEMICOLON
Rule 15    exp -> exp PLUS exp
Rule 16    exp -> exp MINUS exp
Rule 17    exp -> exp DIVIDE exp
Rule 18    exp -> exp MULTIPLY exp
Rule 19    exp -> exp MODULUS exp
Rule 20    exp -> exp POWER exp
Rule 21    exp -> exp LESSTHAN exp
Rule 22    exp -> exp GREATERTHAN exp
Rule 23    exp -> exp GREATERTHANEQUALTO exp
Rule 24    exp -> exp LESSTHANEQUALTO exp
Rule 25    exp -> exp NOTEQUAL exp
Rule 26    exp -> exp EQUALEQUAL exp
Rule 27    exp -> exp AND exp
Rule 28    exp -> exp OR exp
Rule 29    exp -> NAME ARROW NAME
Rule 30    exp -> LPAREN exp RPAREN
Rule 31    exp -> NOT exp
Rule 32    exp -> exp COMMA exp
Rule 33    exp -> INT
Rule 34    exp -> FLOAT
Rule 35    exp -> STRING
Rule 36    exp -> CHAR
Rule 37    exp -> BOOL
Rule 38    exp -> NAME
Rule 39    stmt -> DTYPE NAME EQUAL exp SEMICOLON
Rule 40    DTYPE -> int
Rule 41    DTYPE -> string
Rule 42    DTYPE -> float
Rule 43    DTYPE -> bool
Rule 44    DTYPE -> char
Rule 45    stmt -> NAME EQUAL exp SEMICOLON
Rule 46    stmt -> FOR NAME EQUAL FROM TO END stmt NEXT
Rule 47    FROM -> INT
Rule 48    FROM -> NAME
Rule 49    END -> INT
Rule 50    END -> NAME

Terminals, with rules where they appear

AND                  : 27
ARROW                : 7 29
BOOL                 : 37
CHAR                 : 36
COMMA                : 32
DIVIDE               : 17
ELIF                 : 12
ELSE                 : 13
EQUAL                : 7 39 45 46
EQUALEQUAL           : 26
FLOAT                : 34
FOR                  : 46
GREATERTHAN          : 22
GREATERTHANEQUALTO   : 23
IF                   : 11
INT                  : 33 47 49
LCBRACKET            : 3 11 12 13
LESSTHAN             : 21
LESSTHANEQUALTO      : 24
LPAREN               : 11 12 14 30
MINUS                : 16
MINUSMINUS           : 10
MODULUS              : 19
MULTIPLY             : 18
NAME                 : 3 4 6 6 7 7 8 29 29 38 39 45 46 48 50
NEXT                 : 46
NOT                  : 31
NOTEQUAL             : 25
OR                   : 28
PLUS                 : 15
PLUSPLUS             : 9
POWER                : 20
PRINT                : 14
RCBRACKET            : 3 11 12 13
RPAREN               : 11 12 14 30
SEMICOLON            : 4 6 7 8 14 39 45
STEP                 : 
STRING               : 35
STRUCT               : 3
TO                   : 46
bool                 : 43
char                 : 44
error                : 
float                : 42
int                  : 40
string               : 41

Nonterminals, with rules where they appear

DTYPE                : 4 39
END                  : 46
FROM                 : 46
S                    : 1 0
exp                  : 7 11 12 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 30 31 32 32 39 45
operator             : 8
statement            : 3 4
stmt                 : 1 11 12 13 46

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    S                              shift and go to state 1
    stmt                           shift and go to state 2
    DTYPE                          shift and go to state 9

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 2
    S                              shift and go to state 16
    DTYPE                          shift and go to state 9

state 3

    (3) stmt -> STRUCT . NAME LCBRACKET statement RCBRACKET

    NAME            shift and go to state 17


state 4

    (6) stmt -> NAME . NAME SEMICOLON
    (7) stmt -> NAME . ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> NAME . operator SEMICOLON
    (45) stmt -> NAME . EQUAL exp SEMICOLON
    (9) operator -> . PLUSPLUS
    (10) operator -> . MINUSMINUS

    NAME            shift and go to state 18
    ARROW           shift and go to state 19
    EQUAL           shift and go to state 20
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 23

    operator                       shift and go to state 21

state 5

    (11) stmt -> IF . LPAREN exp RPAREN LCBRACKET stmt RCBRACKET

    LPAREN          shift and go to state 24


state 6

    (12) stmt -> ELIF . LPAREN exp RPAREN LCBRACKET stmt RCBRACKET

    LPAREN          shift and go to state 25


state 7

    (13) stmt -> ELSE . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 26


state 8

    (14) stmt -> PRINT . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 27


state 9

    (39) stmt -> DTYPE . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 28


state 10

    (46) stmt -> FOR . NAME EQUAL FROM TO END stmt NEXT

    NAME            shift and go to state 29


state 11

    (40) DTYPE -> int .

    NAME            reduce using rule 40 (DTYPE -> int .)


state 12

    (41) DTYPE -> string .

    NAME            reduce using rule 41 (DTYPE -> string .)


state 13

    (42) DTYPE -> float .

    NAME            reduce using rule 42 (DTYPE -> float .)


state 14

    (43) DTYPE -> bool .

    NAME            reduce using rule 43 (DTYPE -> bool .)


state 15

    (44) DTYPE -> char .

    NAME            reduce using rule 44 (DTYPE -> char .)


state 16

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)


state 17

    (3) stmt -> STRUCT NAME . LCBRACKET statement RCBRACKET

    LCBRACKET       shift and go to state 30


state 18

    (6) stmt -> NAME NAME . SEMICOLON

    SEMICOLON       shift and go to state 31


state 19

    (7) stmt -> NAME ARROW . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 32


state 20

    (45) stmt -> NAME EQUAL . exp SEMICOLON
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 34

state 21

    (8) stmt -> NAME operator . SEMICOLON

    SEMICOLON       shift and go to state 42


state 22

    (9) operator -> PLUSPLUS .

    SEMICOLON       reduce using rule 9 (operator -> PLUSPLUS .)


state 23

    (10) operator -> MINUSMINUS .

    SEMICOLON       reduce using rule 10 (operator -> MINUSMINUS .)


state 24

    (11) stmt -> IF LPAREN . exp RPAREN LCBRACKET stmt RCBRACKET
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 43

state 25

    (12) stmt -> ELIF LPAREN . exp RPAREN LCBRACKET stmt RCBRACKET
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 44

state 26

    (13) stmt -> ELSE LCBRACKET . stmt RCBRACKET
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 45
    DTYPE                          shift and go to state 9

state 27

    (14) stmt -> PRINT LPAREN . exp RPAREN SEMICOLON
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 46

state 28

    (39) stmt -> DTYPE NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 47


state 29

    (46) stmt -> FOR NAME . EQUAL FROM TO END stmt NEXT

    EQUAL           shift and go to state 48


state 30

    (3) stmt -> STRUCT NAME LCBRACKET . statement RCBRACKET
    (4) statement -> . DTYPE NAME SEMICOLON statement
    (5) statement -> .
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    RCBRACKET       reduce using rule 5 (statement -> .)
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    statement                      shift and go to state 49
    DTYPE                          shift and go to state 50

state 31

    (6) stmt -> NAME NAME SEMICOLON .

    STRUCT          reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    NAME            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    IF              reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    ELIF            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    ELSE            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    PRINT           reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    FOR             reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    int             reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    string          reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    float           reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    bool            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    char            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    $end            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    RCBRACKET       reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    NEXT            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)


state 32

    (7) stmt -> NAME ARROW NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 51


state 33

    (29) exp -> NAME . ARROW NAME
    (38) exp -> NAME .

    ARROW           shift and go to state 52
    SEMICOLON       reduce using rule 38 (exp -> NAME .)
    PLUS            reduce using rule 38 (exp -> NAME .)
    MINUS           reduce using rule 38 (exp -> NAME .)
    DIVIDE          reduce using rule 38 (exp -> NAME .)
    MULTIPLY        reduce using rule 38 (exp -> NAME .)
    MODULUS         reduce using rule 38 (exp -> NAME .)
    POWER           reduce using rule 38 (exp -> NAME .)
    LESSTHAN        reduce using rule 38 (exp -> NAME .)
    GREATERTHAN     reduce using rule 38 (exp -> NAME .)
    GREATERTHANEQUALTO reduce using rule 38 (exp -> NAME .)
    LESSTHANEQUALTO reduce using rule 38 (exp -> NAME .)
    NOTEQUAL        reduce using rule 38 (exp -> NAME .)
    EQUALEQUAL      reduce using rule 38 (exp -> NAME .)
    AND             reduce using rule 38 (exp -> NAME .)
    OR              reduce using rule 38 (exp -> NAME .)
    COMMA           reduce using rule 38 (exp -> NAME .)
    RPAREN          reduce using rule 38 (exp -> NAME .)


state 34

    (45) stmt -> NAME EQUAL exp . SEMICOLON
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 35

    (30) exp -> LPAREN . exp RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 69

state 36

    (31) exp -> NOT . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 70

state 37

    (33) exp -> INT .

    SEMICOLON       reduce using rule 33 (exp -> INT .)
    PLUS            reduce using rule 33 (exp -> INT .)
    MINUS           reduce using rule 33 (exp -> INT .)
    DIVIDE          reduce using rule 33 (exp -> INT .)
    MULTIPLY        reduce using rule 33 (exp -> INT .)
    MODULUS         reduce using rule 33 (exp -> INT .)
    POWER           reduce using rule 33 (exp -> INT .)
    LESSTHAN        reduce using rule 33 (exp -> INT .)
    GREATERTHAN     reduce using rule 33 (exp -> INT .)
    GREATERTHANEQUALTO reduce using rule 33 (exp -> INT .)
    LESSTHANEQUALTO reduce using rule 33 (exp -> INT .)
    NOTEQUAL        reduce using rule 33 (exp -> INT .)
    EQUALEQUAL      reduce using rule 33 (exp -> INT .)
    AND             reduce using rule 33 (exp -> INT .)
    OR              reduce using rule 33 (exp -> INT .)
    COMMA           reduce using rule 33 (exp -> INT .)
    RPAREN          reduce using rule 33 (exp -> INT .)


state 38

    (34) exp -> FLOAT .

    SEMICOLON       reduce using rule 34 (exp -> FLOAT .)
    PLUS            reduce using rule 34 (exp -> FLOAT .)
    MINUS           reduce using rule 34 (exp -> FLOAT .)
    DIVIDE          reduce using rule 34 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 34 (exp -> FLOAT .)
    MODULUS         reduce using rule 34 (exp -> FLOAT .)
    POWER           reduce using rule 34 (exp -> FLOAT .)
    LESSTHAN        reduce using rule 34 (exp -> FLOAT .)
    GREATERTHAN     reduce using rule 34 (exp -> FLOAT .)
    GREATERTHANEQUALTO reduce using rule 34 (exp -> FLOAT .)
    LESSTHANEQUALTO reduce using rule 34 (exp -> FLOAT .)
    NOTEQUAL        reduce using rule 34 (exp -> FLOAT .)
    EQUALEQUAL      reduce using rule 34 (exp -> FLOAT .)
    AND             reduce using rule 34 (exp -> FLOAT .)
    OR              reduce using rule 34 (exp -> FLOAT .)
    COMMA           reduce using rule 34 (exp -> FLOAT .)
    RPAREN          reduce using rule 34 (exp -> FLOAT .)


state 39

    (35) exp -> STRING .

    SEMICOLON       reduce using rule 35 (exp -> STRING .)
    PLUS            reduce using rule 35 (exp -> STRING .)
    MINUS           reduce using rule 35 (exp -> STRING .)
    DIVIDE          reduce using rule 35 (exp -> STRING .)
    MULTIPLY        reduce using rule 35 (exp -> STRING .)
    MODULUS         reduce using rule 35 (exp -> STRING .)
    POWER           reduce using rule 35 (exp -> STRING .)
    LESSTHAN        reduce using rule 35 (exp -> STRING .)
    GREATERTHAN     reduce using rule 35 (exp -> STRING .)
    GREATERTHANEQUALTO reduce using rule 35 (exp -> STRING .)
    LESSTHANEQUALTO reduce using rule 35 (exp -> STRING .)
    NOTEQUAL        reduce using rule 35 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 35 (exp -> STRING .)
    AND             reduce using rule 35 (exp -> STRING .)
    OR              reduce using rule 35 (exp -> STRING .)
    COMMA           reduce using rule 35 (exp -> STRING .)
    RPAREN          reduce using rule 35 (exp -> STRING .)


state 40

    (36) exp -> CHAR .

    SEMICOLON       reduce using rule 36 (exp -> CHAR .)
    PLUS            reduce using rule 36 (exp -> CHAR .)
    MINUS           reduce using rule 36 (exp -> CHAR .)
    DIVIDE          reduce using rule 36 (exp -> CHAR .)
    MULTIPLY        reduce using rule 36 (exp -> CHAR .)
    MODULUS         reduce using rule 36 (exp -> CHAR .)
    POWER           reduce using rule 36 (exp -> CHAR .)
    LESSTHAN        reduce using rule 36 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 36 (exp -> CHAR .)
    GREATERTHANEQUALTO reduce using rule 36 (exp -> CHAR .)
    LESSTHANEQUALTO reduce using rule 36 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 36 (exp -> CHAR .)
    EQUALEQUAL      reduce using rule 36 (exp -> CHAR .)
    AND             reduce using rule 36 (exp -> CHAR .)
    OR              reduce using rule 36 (exp -> CHAR .)
    COMMA           reduce using rule 36 (exp -> CHAR .)
    RPAREN          reduce using rule 36 (exp -> CHAR .)


state 41

    (37) exp -> BOOL .

    SEMICOLON       reduce using rule 37 (exp -> BOOL .)
    PLUS            reduce using rule 37 (exp -> BOOL .)
    MINUS           reduce using rule 37 (exp -> BOOL .)
    DIVIDE          reduce using rule 37 (exp -> BOOL .)
    MULTIPLY        reduce using rule 37 (exp -> BOOL .)
    MODULUS         reduce using rule 37 (exp -> BOOL .)
    POWER           reduce using rule 37 (exp -> BOOL .)
    LESSTHAN        reduce using rule 37 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 37 (exp -> BOOL .)
    GREATERTHANEQUALTO reduce using rule 37 (exp -> BOOL .)
    LESSTHANEQUALTO reduce using rule 37 (exp -> BOOL .)
    NOTEQUAL        reduce using rule 37 (exp -> BOOL .)
    EQUALEQUAL      reduce using rule 37 (exp -> BOOL .)
    AND             reduce using rule 37 (exp -> BOOL .)
    OR              reduce using rule 37 (exp -> BOOL .)
    COMMA           reduce using rule 37 (exp -> BOOL .)
    RPAREN          reduce using rule 37 (exp -> BOOL .)


state 42

    (8) stmt -> NAME operator SEMICOLON .

    STRUCT          reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    NAME            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    IF              reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    ELIF            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    ELSE            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    PRINT           reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    FOR             reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    int             reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    string          reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    float           reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    bool            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    char            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    $end            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    RCBRACKET       reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    NEXT            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)


state 43

    (11) stmt -> IF LPAREN exp . RPAREN LCBRACKET stmt RCBRACKET
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    RPAREN          shift and go to state 71
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 44

    (12) stmt -> ELIF LPAREN exp . RPAREN LCBRACKET stmt RCBRACKET
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    RPAREN          shift and go to state 72
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 45

    (13) stmt -> ELSE LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 73


state 46

    (14) stmt -> PRINT LPAREN exp . RPAREN SEMICOLON
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 47

    (39) stmt -> DTYPE NAME EQUAL . exp SEMICOLON
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 75

state 48

    (46) stmt -> FOR NAME EQUAL . FROM TO END stmt NEXT
    (47) FROM -> . INT
    (48) FROM -> . NAME

    INT             shift and go to state 78
    NAME            shift and go to state 76

    FROM                           shift and go to state 77

state 49

    (3) stmt -> STRUCT NAME LCBRACKET statement . RCBRACKET

    RCBRACKET       shift and go to state 79


state 50

    (4) statement -> DTYPE . NAME SEMICOLON statement

    NAME            shift and go to state 80


state 51

    (7) stmt -> NAME ARROW NAME EQUAL . exp SEMICOLON
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 81

state 52

    (29) exp -> NAME ARROW . NAME

    NAME            shift and go to state 82


state 53

    (45) stmt -> NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 45 (stmt -> NAME EQUAL exp SEMICOLON .)


state 54

    (15) exp -> exp PLUS . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 83

state 55

    (16) exp -> exp MINUS . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 84

state 56

    (17) exp -> exp DIVIDE . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 85

state 57

    (18) exp -> exp MULTIPLY . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 86

state 58

    (19) exp -> exp MODULUS . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 87

state 59

    (20) exp -> exp POWER . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 88

state 60

    (21) exp -> exp LESSTHAN . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 89

state 61

    (22) exp -> exp GREATERTHAN . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 90

state 62

    (23) exp -> exp GREATERTHANEQUALTO . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 91

state 63

    (24) exp -> exp LESSTHANEQUALTO . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 92

state 64

    (25) exp -> exp NOTEQUAL . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 93

state 65

    (26) exp -> exp EQUALEQUAL . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 94

state 66

    (27) exp -> exp AND . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 95

state 67

    (28) exp -> exp OR . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 96

state 68

    (32) exp -> exp COMMA . exp
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp MULTIPLY exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp POWER exp
    (21) exp -> . exp LESSTHAN exp
    (22) exp -> . exp GREATERTHAN exp
    (23) exp -> . exp GREATERTHANEQUALTO exp
    (24) exp -> . exp LESSTHANEQUALTO exp
    (25) exp -> . exp NOTEQUAL exp
    (26) exp -> . exp EQUALEQUAL exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NAME ARROW NAME
    (30) exp -> . LPAREN exp RPAREN
    (31) exp -> . NOT exp
    (32) exp -> . exp COMMA exp
    (33) exp -> . INT
    (34) exp -> . FLOAT
    (35) exp -> . STRING
    (36) exp -> . CHAR
    (37) exp -> . BOOL
    (38) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 35
    NOT             shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    CHAR            shift and go to state 40
    BOOL            shift and go to state 41

    exp                            shift and go to state 97

state 69

    (30) exp -> LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 70

    (31) exp -> NOT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 31 (exp -> NOT exp .)
    RPAREN          reduce using rule 31 (exp -> NOT exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 31 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> NOT exp .) ]
  ! DIVIDE          [ reduce using rule 31 (exp -> NOT exp .) ]
  ! MULTIPLY        [ reduce using rule 31 (exp -> NOT exp .) ]
  ! MODULUS         [ reduce using rule 31 (exp -> NOT exp .) ]
  ! POWER           [ reduce using rule 31 (exp -> NOT exp .) ]
  ! LESSTHAN        [ reduce using rule 31 (exp -> NOT exp .) ]
  ! GREATERTHAN     [ reduce using rule 31 (exp -> NOT exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 31 (exp -> NOT exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 31 (exp -> NOT exp .) ]
  ! NOTEQUAL        [ reduce using rule 31 (exp -> NOT exp .) ]
  ! EQUALEQUAL      [ reduce using rule 31 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 31 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 31 (exp -> NOT exp .) ]
  ! COMMA           [ reduce using rule 31 (exp -> NOT exp .) ]


state 71

    (11) stmt -> IF LPAREN exp RPAREN . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 99


state 72

    (12) stmt -> ELIF LPAREN exp RPAREN . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 100


state 73

    (13) stmt -> ELSE LCBRACKET stmt RCBRACKET .

    STRUCT          reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    NAME            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    FOR             reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    NEXT            reduce using rule 13 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)


state 74

    (14) stmt -> PRINT LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 75

    (39) stmt -> DTYPE NAME EQUAL exp . SEMICOLON
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 102
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 76

    (48) FROM -> NAME .

    TO              reduce using rule 48 (FROM -> NAME .)


state 77

    (46) stmt -> FOR NAME EQUAL FROM . TO END stmt NEXT

    TO              shift and go to state 103


state 78

    (47) FROM -> INT .

    TO              reduce using rule 47 (FROM -> INT .)


state 79

    (3) stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .

    STRUCT          reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    NAME            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    IF              reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    ELIF            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    ELSE            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    PRINT           reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    FOR             reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    int             reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    string          reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    float           reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    bool            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    char            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    $end            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    RCBRACKET       reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    NEXT            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)


state 80

    (4) statement -> DTYPE NAME . SEMICOLON statement

    SEMICOLON       shift and go to state 104


state 81

    (7) stmt -> NAME ARROW NAME EQUAL exp . SEMICOLON
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 105
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68


state 82

    (29) exp -> NAME ARROW NAME .

    SEMICOLON       reduce using rule 29 (exp -> NAME ARROW NAME .)
    PLUS            reduce using rule 29 (exp -> NAME ARROW NAME .)
    MINUS           reduce using rule 29 (exp -> NAME ARROW NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME ARROW NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME ARROW NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME ARROW NAME .)
    POWER           reduce using rule 29 (exp -> NAME ARROW NAME .)
    LESSTHAN        reduce using rule 29 (exp -> NAME ARROW NAME .)
    GREATERTHAN     reduce using rule 29 (exp -> NAME ARROW NAME .)
    GREATERTHANEQUALTO reduce using rule 29 (exp -> NAME ARROW NAME .)
    LESSTHANEQUALTO reduce using rule 29 (exp -> NAME ARROW NAME .)
    NOTEQUAL        reduce using rule 29 (exp -> NAME ARROW NAME .)
    EQUALEQUAL      reduce using rule 29 (exp -> NAME ARROW NAME .)
    AND             reduce using rule 29 (exp -> NAME ARROW NAME .)
    OR              reduce using rule 29 (exp -> NAME ARROW NAME .)
    COMMA           reduce using rule 29 (exp -> NAME ARROW NAME .)
    RPAREN          reduce using rule 29 (exp -> NAME ARROW NAME .)


state 83

    (15) exp -> exp PLUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 15 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! MULTIPLY        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! MODULUS         [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! POWER           [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! LESSTHAN        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! AND             [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! OR              [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! COMMA           [ reduce using rule 15 (exp -> exp PLUS exp .) ]


state 84

    (16) exp -> exp MINUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 16 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 16 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! MULTIPLY        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! MODULUS         [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! POWER           [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! LESSTHAN        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! AND             [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! OR              [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! COMMA           [ reduce using rule 16 (exp -> exp MINUS exp .) ]


state 85

    (17) exp -> exp DIVIDE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 17 (exp -> exp DIVIDE exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! DIVIDE          [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! MULTIPLY        [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! MODULUS         [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! POWER           [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! LESSTHAN        [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHAN     [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! NOTEQUAL        [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! EQUALEQUAL      [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! AND             [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! OR              [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]
  ! COMMA           [ reduce using rule 17 (exp -> exp DIVIDE exp .) ]


state 86

    (18) exp -> exp MULTIPLY exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 18 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 18 (exp -> exp MULTIPLY exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! MODULUS         [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! POWER           [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHAN        [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHAN     [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! NOTEQUAL        [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! EQUALEQUAL      [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! AND             [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! OR              [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]
  ! COMMA           [ reduce using rule 18 (exp -> exp MULTIPLY exp .) ]


state 87

    (19) exp -> exp MODULUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 19 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! LESSTHAN        [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! COMMA           [ reduce using rule 19 (exp -> exp MODULUS exp .) ]


state 88

    (20) exp -> exp POWER exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 20 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 20 (exp -> exp POWER exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! LESSTHAN        [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! GREATERTHAN     [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! EQUALEQUAL      [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp POWER exp .) ]
  ! COMMA           [ reduce using rule 20 (exp -> exp POWER exp .) ]


state 89

    (21) exp -> exp LESSTHAN exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 21 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 21 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! MODULUS         [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! POWER           [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]
  ! COMMA           [ reduce using rule 21 (exp -> exp LESSTHAN exp .) ]


state 90

    (22) exp -> exp GREATERTHAN exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 22 (exp -> exp GREATERTHAN exp .)
    RPAREN          reduce using rule 22 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! MODULUS         [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! POWER           [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! OR              [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]
  ! COMMA           [ reduce using rule 22 (exp -> exp GREATERTHAN exp .) ]


state 91

    (23) exp -> exp GREATERTHANEQUALTO exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .)
    RPAREN          reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 23 (exp -> exp GREATERTHANEQUALTO exp .) ]


state 92

    (24) exp -> exp LESSTHANEQUALTO exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .)
    RPAREN          reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 24 (exp -> exp LESSTHANEQUALTO exp .) ]


state 93

    (25) exp -> exp NOTEQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 25 (exp -> exp NOTEQUAL exp .)
    RPAREN          reduce using rule 25 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! POWER           [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]
  ! COMMA           [ reduce using rule 25 (exp -> exp NOTEQUAL exp .) ]


state 94

    (26) exp -> exp EQUALEQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 26 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 26 (exp -> exp EQUALEQUAL exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! POWER           [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! AND             [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! OR              [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]
  ! COMMA           [ reduce using rule 26 (exp -> exp EQUALEQUAL exp .) ]


state 95

    (27) exp -> exp AND exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 27 (exp -> exp AND exp .)
    RPAREN          reduce using rule 27 (exp -> exp AND exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MODULUS         [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! POWER           [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! NOTEQUAL        [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! EQUALEQUAL      [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! COMMA           [ reduce using rule 27 (exp -> exp AND exp .) ]


state 96

    (28) exp -> exp OR exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 28 (exp -> exp OR exp .)
    RPAREN          reduce using rule 28 (exp -> exp OR exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MODULUS         [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! POWER           [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! NOTEQUAL        [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! COMMA           [ reduce using rule 28 (exp -> exp OR exp .) ]


state 97

    (32) exp -> exp COMMA exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . MULTIPLY exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . POWER exp
    (21) exp -> exp . LESSTHAN exp
    (22) exp -> exp . GREATERTHAN exp
    (23) exp -> exp . GREATERTHANEQUALTO exp
    (24) exp -> exp . LESSTHANEQUALTO exp
    (25) exp -> exp . NOTEQUAL exp
    (26) exp -> exp . EQUALEQUAL exp
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (32) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 32 (exp -> exp COMMA exp .)
    RPAREN          reduce using rule 32 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    MULTIPLY        shift and go to state 57
    MODULUS         shift and go to state 58
    POWER           shift and go to state 59
    LESSTHAN        shift and go to state 60
    GREATERTHAN     shift and go to state 61
    GREATERTHANEQUALTO shift and go to state 62
    LESSTHANEQUALTO shift and go to state 63
    NOTEQUAL        shift and go to state 64
    EQUALEQUAL      shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    COMMA           shift and go to state 68

  ! PLUS            [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! DIVIDE          [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! MULTIPLY        [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! MODULUS         [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! POWER           [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! NOTEQUAL        [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! EQUALEQUAL      [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 32 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 32 (exp -> exp COMMA exp .) ]


state 98

    (30) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    GREATERTHANEQUALTO reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    LESSTHANEQUALTO reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 30 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 30 (exp -> LPAREN exp RPAREN .)


state 99

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET . stmt RCBRACKET
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 106
    DTYPE                          shift and go to state 9

state 100

    (12) stmt -> ELIF LPAREN exp RPAREN LCBRACKET . stmt RCBRACKET
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 107
    DTYPE                          shift and go to state 9

state 101

    (14) stmt -> PRINT LPAREN exp RPAREN SEMICOLON .

    STRUCT          reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    NAME            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELIF            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELSE            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    int             reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    string          reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    float           reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    bool            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    char            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    $end            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    RCBRACKET       reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    NEXT            reduce using rule 14 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)


state 102

    (39) stmt -> DTYPE NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 39 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)


state 103

    (46) stmt -> FOR NAME EQUAL FROM TO . END stmt NEXT
    (49) END -> . INT
    (50) END -> . NAME

    INT             shift and go to state 110
    NAME            shift and go to state 108

    END                            shift and go to state 109

state 104

    (4) statement -> DTYPE NAME SEMICOLON . statement
    (4) statement -> . DTYPE NAME SEMICOLON statement
    (5) statement -> .
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    RCBRACKET       reduce using rule 5 (statement -> .)
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    DTYPE                          shift and go to state 50
    statement                      shift and go to state 111

state 105

    (7) stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)


state 106

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 112


state 107

    (12) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 113


state 108

    (50) END -> NAME .

    STRUCT          reduce using rule 50 (END -> NAME .)
    NAME            reduce using rule 50 (END -> NAME .)
    IF              reduce using rule 50 (END -> NAME .)
    ELIF            reduce using rule 50 (END -> NAME .)
    ELSE            reduce using rule 50 (END -> NAME .)
    PRINT           reduce using rule 50 (END -> NAME .)
    FOR             reduce using rule 50 (END -> NAME .)
    int             reduce using rule 50 (END -> NAME .)
    string          reduce using rule 50 (END -> NAME .)
    float           reduce using rule 50 (END -> NAME .)
    bool            reduce using rule 50 (END -> NAME .)
    char            reduce using rule 50 (END -> NAME .)


state 109

    (46) stmt -> FOR NAME EQUAL FROM TO END . stmt NEXT
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (12) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (13) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (14) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (39) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (45) stmt -> . NAME EQUAL exp SEMICOLON
    (46) stmt -> . FOR NAME EQUAL FROM TO END stmt NEXT
    (40) DTYPE -> . int
    (41) DTYPE -> . string
    (42) DTYPE -> . float
    (43) DTYPE -> . bool
    (44) DTYPE -> . char

    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELIF            shift and go to state 6
    ELSE            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 114
    DTYPE                          shift and go to state 9

state 110

    (49) END -> INT .

    STRUCT          reduce using rule 49 (END -> INT .)
    NAME            reduce using rule 49 (END -> INT .)
    IF              reduce using rule 49 (END -> INT .)
    ELIF            reduce using rule 49 (END -> INT .)
    ELSE            reduce using rule 49 (END -> INT .)
    PRINT           reduce using rule 49 (END -> INT .)
    FOR             reduce using rule 49 (END -> INT .)
    int             reduce using rule 49 (END -> INT .)
    string          reduce using rule 49 (END -> INT .)
    float           reduce using rule 49 (END -> INT .)
    bool            reduce using rule 49 (END -> INT .)
    char            reduce using rule 49 (END -> INT .)


state 111

    (4) statement -> DTYPE NAME SEMICOLON statement .

    RCBRACKET       reduce using rule 4 (statement -> DTYPE NAME SEMICOLON statement .)


state 112

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .

    STRUCT          reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NAME            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    FOR             reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NEXT            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)


state 113

    (12) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .

    STRUCT          reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NAME            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    FOR             reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NEXT            reduce using rule 12 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)


state 114

    (46) stmt -> FOR NAME EQUAL FROM TO END stmt . NEXT

    NEXT            shift and go to state 115


state 115

    (46) stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .

    STRUCT          reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    NAME            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    IF              reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    ELIF            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    ELSE            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    PRINT           reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    FOR             reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    int             reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    string          reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    float           reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    bool            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    char            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    $end            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    RCBRACKET       reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)
    NEXT            reduce using rule 46 (stmt -> FOR NAME EQUAL FROM TO END stmt NEXT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 70 resolved as shift
WARNING: shift/reduce conflict for POWER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 70 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 83 resolved as shift
WARNING: shift/reduce conflict for POWER in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 83 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 84 resolved as shift
WARNING: shift/reduce conflict for POWER in state 84 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 84 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 84 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 85 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 85 resolved as shift
WARNING: shift/reduce conflict for POWER in state 85 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 85 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 85 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 86 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 86 resolved as shift
WARNING: shift/reduce conflict for POWER in state 86 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 86 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 86 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 87 resolved as shift
WARNING: shift/reduce conflict for POWER in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 88 resolved as shift
WARNING: shift/reduce conflict for POWER in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 88 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 89 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 89 resolved as shift
WARNING: shift/reduce conflict for POWER in state 89 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 89 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 89 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 90 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 90 resolved as shift
WARNING: shift/reduce conflict for POWER in state 90 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 90 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 90 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 91 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 91 resolved as shift
WARNING: shift/reduce conflict for POWER in state 91 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 91 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 91 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 92 resolved as shift
WARNING: shift/reduce conflict for POWER in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 92 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 93 resolved as shift
WARNING: shift/reduce conflict for POWER in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 94 resolved as shift
WARNING: shift/reduce conflict for POWER in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 94 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 95 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 95 resolved as shift
WARNING: shift/reduce conflict for POWER in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 95 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 96 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 96 resolved as shift
WARNING: shift/reduce conflict for POWER in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 96 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 97 resolved as shift
WARNING: shift/reduce conflict for POWER in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 97 resolved as shift
