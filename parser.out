Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NOT

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     stmt -> NAME operator SEMICOLON
Rule 3     operator -> PLUSPLUS
Rule 4     operator -> MINUSMINUS
Rule 5     S -> <empty>
Rule 6     stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
Rule 7     stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
Rule 8     stmt -> ELSE LCBRACKET stmt RCBRACKET
Rule 9     stmt -> PRINT LPAREN exp RPAREN SEMICOLON
Rule 10    exp -> exp PLUS exp
Rule 11    exp -> exp MINUS exp
Rule 12    exp -> exp DIVIDE exp
Rule 13    exp -> exp MULTIPLY exp
Rule 14    exp -> exp MODULUS exp
Rule 15    exp -> exp POWER exp
Rule 16    exp -> exp LESSTHAN exp
Rule 17    exp -> exp GREATERTHAN exp
Rule 18    exp -> exp GREATERTHANEQUALTO exp
Rule 19    exp -> exp LESSTHANEQUALTO exp
Rule 20    exp -> exp NOTEQUAL exp
Rule 21    exp -> exp EQUALEQUAL exp
Rule 22    exp -> exp AND exp
Rule 23    exp -> exp OR exp
Rule 24    exp -> LPAREN exp RPAREN
Rule 25    exp -> exp COMMA exp
Rule 26    exp -> INT
Rule 27    exp -> FLOAT
Rule 28    exp -> STRING
Rule 29    exp -> CHAR
Rule 30    exp -> BOOL
Rule 31    exp -> NAME
Rule 32    stmt -> DTYPE NAME EQUAL exp SEMICOLON
Rule 33    DTYPE -> int
Rule 34    DTYPE -> string
Rule 35    DTYPE -> float
Rule 36    DTYPE -> bool
Rule 37    DTYPE -> char
Rule 38    stmt -> NAME EQUAL exp SEMICOLON

Terminals, with rules where they appear

AND                  : 22
BOOL                 : 30
CHAR                 : 29
COMMA                : 25
DIVIDE               : 12
ELIF                 : 7
ELSE                 : 8
EQUAL                : 32 38
EQUALEQUAL           : 21
FLOAT                : 27
GREATERTHAN          : 17
GREATERTHANEQUALTO   : 18
IF                   : 6
INT                  : 26
LCBRACKET            : 6 7 8
LESSTHAN             : 16
LESSTHANEQUALTO      : 19
LPAREN               : 6 7 9 24
MINUS                : 11
MINUSMINUS           : 4
MODULUS              : 14
MULTIPLY             : 13
NAME                 : 2 31 32 38
NOT                  : 
NOTEQUAL             : 20
OR                   : 23
PLUS                 : 10
PLUSPLUS             : 3
POWER                : 15
PRINT                : 9
RCBRACKET            : 6 7 8
RPAREN               : 6 7 9 24
SEMICOLON            : 2 9 32 38
STRING               : 28
bool                 : 36
char                 : 37
error                : 
float                : 35
int                  : 33
string               : 34

Nonterminals, with rules where they appear

DTYPE                : 32
S                    : 1 0
exp                  : 6 7 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 25 25 32 38
operator             : 2
stmt                 : 1 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (5) S -> .
    (2) stmt -> . NAME operator SEMICOLON
    (6) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (7) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (8) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (9) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (32) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (38) stmt -> . NAME EQUAL exp SEMICOLON
    (33) DTYPE -> . int
    (34) DTYPE -> . string
    (35) DTYPE -> . float
    (36) DTYPE -> . bool
    (37) DTYPE -> . char

    $end            reduce using rule 5 (S -> .)
    NAME            shift and go to state 3
    IF              shift and go to state 4
    ELIF            shift and go to state 5
    ELSE            shift and go to state 6
    PRINT           shift and go to state 7
    int             shift and go to state 9
    string          shift and go to state 10
    float           shift and go to state 11
    bool            shift and go to state 12
    char            shift and go to state 13

    S                              shift and go to state 1
    stmt                           shift and go to state 2
    DTYPE                          shift and go to state 8

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (5) S -> .
    (2) stmt -> . NAME operator SEMICOLON
    (6) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (7) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (8) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (9) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (32) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (38) stmt -> . NAME EQUAL exp SEMICOLON
    (33) DTYPE -> . int
    (34) DTYPE -> . string
    (35) DTYPE -> . float
    (36) DTYPE -> . bool
    (37) DTYPE -> . char

    $end            reduce using rule 5 (S -> .)
    NAME            shift and go to state 3
    IF              shift and go to state 4
    ELIF            shift and go to state 5
    ELSE            shift and go to state 6
    PRINT           shift and go to state 7
    int             shift and go to state 9
    string          shift and go to state 10
    float           shift and go to state 11
    bool            shift and go to state 12
    char            shift and go to state 13

    stmt                           shift and go to state 2
    S                              shift and go to state 14
    DTYPE                          shift and go to state 8

state 3

    (2) stmt -> NAME . operator SEMICOLON
    (38) stmt -> NAME . EQUAL exp SEMICOLON
    (3) operator -> . PLUSPLUS
    (4) operator -> . MINUSMINUS

    EQUAL           shift and go to state 16
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 18

    operator                       shift and go to state 15

state 4

    (6) stmt -> IF . LPAREN exp RPAREN LCBRACKET stmt RCBRACKET

    LPAREN          shift and go to state 19


state 5

    (7) stmt -> ELIF . LPAREN exp RPAREN LCBRACKET stmt RCBRACKET

    LPAREN          shift and go to state 20


state 6

    (8) stmt -> ELSE . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 21


state 7

    (9) stmt -> PRINT . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 22


state 8

    (32) stmt -> DTYPE . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 23


state 9

    (33) DTYPE -> int .

    NAME            reduce using rule 33 (DTYPE -> int .)


state 10

    (34) DTYPE -> string .

    NAME            reduce using rule 34 (DTYPE -> string .)


state 11

    (35) DTYPE -> float .

    NAME            reduce using rule 35 (DTYPE -> float .)


state 12

    (36) DTYPE -> bool .

    NAME            reduce using rule 36 (DTYPE -> bool .)


state 13

    (37) DTYPE -> char .

    NAME            reduce using rule 37 (DTYPE -> char .)


state 14

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)


state 15

    (2) stmt -> NAME operator . SEMICOLON

    SEMICOLON       shift and go to state 24


state 16

    (38) stmt -> NAME EQUAL . exp SEMICOLON
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 26

state 17

    (3) operator -> PLUSPLUS .

    SEMICOLON       reduce using rule 3 (operator -> PLUSPLUS .)


state 18

    (4) operator -> MINUSMINUS .

    SEMICOLON       reduce using rule 4 (operator -> MINUSMINUS .)


state 19

    (6) stmt -> IF LPAREN . exp RPAREN LCBRACKET stmt RCBRACKET
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 33

state 20

    (7) stmt -> ELIF LPAREN . exp RPAREN LCBRACKET stmt RCBRACKET
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 34

state 21

    (8) stmt -> ELSE LCBRACKET . stmt RCBRACKET
    (2) stmt -> . NAME operator SEMICOLON
    (6) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (7) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (8) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (9) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (32) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (38) stmt -> . NAME EQUAL exp SEMICOLON
    (33) DTYPE -> . int
    (34) DTYPE -> . string
    (35) DTYPE -> . float
    (36) DTYPE -> . bool
    (37) DTYPE -> . char

    NAME            shift and go to state 3
    IF              shift and go to state 4
    ELIF            shift and go to state 5
    ELSE            shift and go to state 6
    PRINT           shift and go to state 7
    int             shift and go to state 9
    string          shift and go to state 10
    float           shift and go to state 11
    bool            shift and go to state 12
    char            shift and go to state 13

    stmt                           shift and go to state 35
    DTYPE                          shift and go to state 8

state 22

    (9) stmt -> PRINT LPAREN . exp RPAREN SEMICOLON
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 36

state 23

    (32) stmt -> DTYPE NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 37


state 24

    (2) stmt -> NAME operator SEMICOLON .

    NAME            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    IF              reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    ELIF            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    ELSE            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    PRINT           reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    int             reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    string          reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    float           reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    bool            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    char            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    $end            reduce using rule 2 (stmt -> NAME operator SEMICOLON .)
    RCBRACKET       reduce using rule 2 (stmt -> NAME operator SEMICOLON .)


state 25

    (31) exp -> NAME .

    SEMICOLON       reduce using rule 31 (exp -> NAME .)
    PLUS            reduce using rule 31 (exp -> NAME .)
    MINUS           reduce using rule 31 (exp -> NAME .)
    DIVIDE          reduce using rule 31 (exp -> NAME .)
    MULTIPLY        reduce using rule 31 (exp -> NAME .)
    MODULUS         reduce using rule 31 (exp -> NAME .)
    POWER           reduce using rule 31 (exp -> NAME .)
    LESSTHAN        reduce using rule 31 (exp -> NAME .)
    GREATERTHAN     reduce using rule 31 (exp -> NAME .)
    GREATERTHANEQUALTO reduce using rule 31 (exp -> NAME .)
    LESSTHANEQUALTO reduce using rule 31 (exp -> NAME .)
    NOTEQUAL        reduce using rule 31 (exp -> NAME .)
    EQUALEQUAL      reduce using rule 31 (exp -> NAME .)
    AND             reduce using rule 31 (exp -> NAME .)
    OR              reduce using rule 31 (exp -> NAME .)
    COMMA           reduce using rule 31 (exp -> NAME .)
    RPAREN          reduce using rule 31 (exp -> NAME .)


state 26

    (38) stmt -> NAME EQUAL exp . SEMICOLON
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 27

    (24) exp -> LPAREN . exp RPAREN
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 54

state 28

    (26) exp -> INT .

    SEMICOLON       reduce using rule 26 (exp -> INT .)
    PLUS            reduce using rule 26 (exp -> INT .)
    MINUS           reduce using rule 26 (exp -> INT .)
    DIVIDE          reduce using rule 26 (exp -> INT .)
    MULTIPLY        reduce using rule 26 (exp -> INT .)
    MODULUS         reduce using rule 26 (exp -> INT .)
    POWER           reduce using rule 26 (exp -> INT .)
    LESSTHAN        reduce using rule 26 (exp -> INT .)
    GREATERTHAN     reduce using rule 26 (exp -> INT .)
    GREATERTHANEQUALTO reduce using rule 26 (exp -> INT .)
    LESSTHANEQUALTO reduce using rule 26 (exp -> INT .)
    NOTEQUAL        reduce using rule 26 (exp -> INT .)
    EQUALEQUAL      reduce using rule 26 (exp -> INT .)
    AND             reduce using rule 26 (exp -> INT .)
    OR              reduce using rule 26 (exp -> INT .)
    COMMA           reduce using rule 26 (exp -> INT .)
    RPAREN          reduce using rule 26 (exp -> INT .)


state 29

    (27) exp -> FLOAT .

    SEMICOLON       reduce using rule 27 (exp -> FLOAT .)
    PLUS            reduce using rule 27 (exp -> FLOAT .)
    MINUS           reduce using rule 27 (exp -> FLOAT .)
    DIVIDE          reduce using rule 27 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 27 (exp -> FLOAT .)
    MODULUS         reduce using rule 27 (exp -> FLOAT .)
    POWER           reduce using rule 27 (exp -> FLOAT .)
    LESSTHAN        reduce using rule 27 (exp -> FLOAT .)
    GREATERTHAN     reduce using rule 27 (exp -> FLOAT .)
    GREATERTHANEQUALTO reduce using rule 27 (exp -> FLOAT .)
    LESSTHANEQUALTO reduce using rule 27 (exp -> FLOAT .)
    NOTEQUAL        reduce using rule 27 (exp -> FLOAT .)
    EQUALEQUAL      reduce using rule 27 (exp -> FLOAT .)
    AND             reduce using rule 27 (exp -> FLOAT .)
    OR              reduce using rule 27 (exp -> FLOAT .)
    COMMA           reduce using rule 27 (exp -> FLOAT .)
    RPAREN          reduce using rule 27 (exp -> FLOAT .)


state 30

    (28) exp -> STRING .

    SEMICOLON       reduce using rule 28 (exp -> STRING .)
    PLUS            reduce using rule 28 (exp -> STRING .)
    MINUS           reduce using rule 28 (exp -> STRING .)
    DIVIDE          reduce using rule 28 (exp -> STRING .)
    MULTIPLY        reduce using rule 28 (exp -> STRING .)
    MODULUS         reduce using rule 28 (exp -> STRING .)
    POWER           reduce using rule 28 (exp -> STRING .)
    LESSTHAN        reduce using rule 28 (exp -> STRING .)
    GREATERTHAN     reduce using rule 28 (exp -> STRING .)
    GREATERTHANEQUALTO reduce using rule 28 (exp -> STRING .)
    LESSTHANEQUALTO reduce using rule 28 (exp -> STRING .)
    NOTEQUAL        reduce using rule 28 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 28 (exp -> STRING .)
    AND             reduce using rule 28 (exp -> STRING .)
    OR              reduce using rule 28 (exp -> STRING .)
    COMMA           reduce using rule 28 (exp -> STRING .)
    RPAREN          reduce using rule 28 (exp -> STRING .)


state 31

    (29) exp -> CHAR .

    SEMICOLON       reduce using rule 29 (exp -> CHAR .)
    PLUS            reduce using rule 29 (exp -> CHAR .)
    MINUS           reduce using rule 29 (exp -> CHAR .)
    DIVIDE          reduce using rule 29 (exp -> CHAR .)
    MULTIPLY        reduce using rule 29 (exp -> CHAR .)
    MODULUS         reduce using rule 29 (exp -> CHAR .)
    POWER           reduce using rule 29 (exp -> CHAR .)
    LESSTHAN        reduce using rule 29 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 29 (exp -> CHAR .)
    GREATERTHANEQUALTO reduce using rule 29 (exp -> CHAR .)
    LESSTHANEQUALTO reduce using rule 29 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 29 (exp -> CHAR .)
    EQUALEQUAL      reduce using rule 29 (exp -> CHAR .)
    AND             reduce using rule 29 (exp -> CHAR .)
    OR              reduce using rule 29 (exp -> CHAR .)
    COMMA           reduce using rule 29 (exp -> CHAR .)
    RPAREN          reduce using rule 29 (exp -> CHAR .)


state 32

    (30) exp -> BOOL .

    SEMICOLON       reduce using rule 30 (exp -> BOOL .)
    PLUS            reduce using rule 30 (exp -> BOOL .)
    MINUS           reduce using rule 30 (exp -> BOOL .)
    DIVIDE          reduce using rule 30 (exp -> BOOL .)
    MULTIPLY        reduce using rule 30 (exp -> BOOL .)
    MODULUS         reduce using rule 30 (exp -> BOOL .)
    POWER           reduce using rule 30 (exp -> BOOL .)
    LESSTHAN        reduce using rule 30 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 30 (exp -> BOOL .)
    GREATERTHANEQUALTO reduce using rule 30 (exp -> BOOL .)
    LESSTHANEQUALTO reduce using rule 30 (exp -> BOOL .)
    NOTEQUAL        reduce using rule 30 (exp -> BOOL .)
    EQUALEQUAL      reduce using rule 30 (exp -> BOOL .)
    AND             reduce using rule 30 (exp -> BOOL .)
    OR              reduce using rule 30 (exp -> BOOL .)
    COMMA           reduce using rule 30 (exp -> BOOL .)
    RPAREN          reduce using rule 30 (exp -> BOOL .)


state 33

    (6) stmt -> IF LPAREN exp . RPAREN LCBRACKET stmt RCBRACKET
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    RPAREN          shift and go to state 55
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 34

    (7) stmt -> ELIF LPAREN exp . RPAREN LCBRACKET stmt RCBRACKET
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    RPAREN          shift and go to state 56
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 35

    (8) stmt -> ELSE LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 57


state 36

    (9) stmt -> PRINT LPAREN exp . RPAREN SEMICOLON
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 37

    (32) stmt -> DTYPE NAME EQUAL . exp SEMICOLON
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 59

state 38

    (38) stmt -> NAME EQUAL exp SEMICOLON .

    NAME            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 38 (stmt -> NAME EQUAL exp SEMICOLON .)


state 39

    (10) exp -> exp PLUS . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 60

state 40

    (11) exp -> exp MINUS . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 61

state 41

    (12) exp -> exp DIVIDE . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 62

state 42

    (13) exp -> exp MULTIPLY . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 63

state 43

    (14) exp -> exp MODULUS . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 64

state 44

    (15) exp -> exp POWER . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 65

state 45

    (16) exp -> exp LESSTHAN . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 66

state 46

    (17) exp -> exp GREATERTHAN . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 67

state 47

    (18) exp -> exp GREATERTHANEQUALTO . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 68

state 48

    (19) exp -> exp LESSTHANEQUALTO . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 69

state 49

    (20) exp -> exp NOTEQUAL . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 70

state 50

    (21) exp -> exp EQUALEQUAL . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 71

state 51

    (22) exp -> exp AND . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 72

state 52

    (23) exp -> exp OR . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 73

state 53

    (25) exp -> exp COMMA . exp
    (10) exp -> . exp PLUS exp
    (11) exp -> . exp MINUS exp
    (12) exp -> . exp DIVIDE exp
    (13) exp -> . exp MULTIPLY exp
    (14) exp -> . exp MODULUS exp
    (15) exp -> . exp POWER exp
    (16) exp -> . exp LESSTHAN exp
    (17) exp -> . exp GREATERTHAN exp
    (18) exp -> . exp GREATERTHANEQUALTO exp
    (19) exp -> . exp LESSTHANEQUALTO exp
    (20) exp -> . exp NOTEQUAL exp
    (21) exp -> . exp EQUALEQUAL exp
    (22) exp -> . exp AND exp
    (23) exp -> . exp OR exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp COMMA exp
    (26) exp -> . INT
    (27) exp -> . FLOAT
    (28) exp -> . STRING
    (29) exp -> . CHAR
    (30) exp -> . BOOL
    (31) exp -> . NAME

    LPAREN          shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    CHAR            shift and go to state 31
    BOOL            shift and go to state 32
    NAME            shift and go to state 25

    exp                            shift and go to state 74

state 54

    (24) exp -> LPAREN exp . RPAREN
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 55

    (6) stmt -> IF LPAREN exp RPAREN . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 76


state 56

    (7) stmt -> ELIF LPAREN exp RPAREN . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 77


state 57

    (8) stmt -> ELSE LCBRACKET stmt RCBRACKET .

    NAME            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 8 (stmt -> ELSE LCBRACKET stmt RCBRACKET .)


state 58

    (9) stmt -> PRINT LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 78


state 59

    (32) stmt -> DTYPE NAME EQUAL exp . SEMICOLON
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 79
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53


state 60

    (10) exp -> exp PLUS exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 10 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 10 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! MULTIPLY        [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! MODULUS         [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! POWER           [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! LESSTHAN        [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! AND             [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! OR              [ reduce using rule 10 (exp -> exp PLUS exp .) ]
  ! COMMA           [ reduce using rule 10 (exp -> exp PLUS exp .) ]


state 61

    (11) exp -> exp MINUS exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 11 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 11 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! MULTIPLY        [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! MODULUS         [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! POWER           [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! LESSTHAN        [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! AND             [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! OR              [ reduce using rule 11 (exp -> exp MINUS exp .) ]
  ! COMMA           [ reduce using rule 11 (exp -> exp MINUS exp .) ]


state 62

    (12) exp -> exp DIVIDE exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 12 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 12 (exp -> exp DIVIDE exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! DIVIDE          [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! MULTIPLY        [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! MODULUS         [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! POWER           [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! LESSTHAN        [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHAN     [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! NOTEQUAL        [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! EQUALEQUAL      [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! AND             [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! OR              [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]
  ! COMMA           [ reduce using rule 12 (exp -> exp DIVIDE exp .) ]


state 63

    (13) exp -> exp MULTIPLY exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 13 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 13 (exp -> exp MULTIPLY exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! MINUS           [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! DIVIDE          [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! MULTIPLY        [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! MODULUS         [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! POWER           [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHAN        [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHAN     [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! NOTEQUAL        [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! EQUALEQUAL      [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! AND             [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! OR              [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]
  ! COMMA           [ reduce using rule 13 (exp -> exp MULTIPLY exp .) ]


state 64

    (14) exp -> exp MODULUS exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 14 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 14 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! LESSTHAN        [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 14 (exp -> exp MODULUS exp .) ]
  ! COMMA           [ reduce using rule 14 (exp -> exp MODULUS exp .) ]


state 65

    (15) exp -> exp POWER exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 15 (exp -> exp POWER exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! LESSTHAN        [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! GREATERTHAN     [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! EQUALEQUAL      [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 15 (exp -> exp POWER exp .) ]
  ! COMMA           [ reduce using rule 15 (exp -> exp POWER exp .) ]


state 66

    (16) exp -> exp LESSTHAN exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 16 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 16 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! MODULUS         [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! POWER           [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]
  ! COMMA           [ reduce using rule 16 (exp -> exp LESSTHAN exp .) ]


state 67

    (17) exp -> exp GREATERTHAN exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (exp -> exp GREATERTHAN exp .)
    RPAREN          reduce using rule 17 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! MODULUS         [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! POWER           [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! AND             [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! OR              [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]
  ! COMMA           [ reduce using rule 17 (exp -> exp GREATERTHAN exp .) ]


state 68

    (18) exp -> exp GREATERTHANEQUALTO exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .)
    RPAREN          reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 18 (exp -> exp GREATERTHANEQUALTO exp .) ]


state 69

    (19) exp -> exp LESSTHANEQUALTO exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .)
    RPAREN          reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 19 (exp -> exp LESSTHANEQUALTO exp .) ]


state 70

    (20) exp -> exp NOTEQUAL exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 20 (exp -> exp NOTEQUAL exp .)
    RPAREN          reduce using rule 20 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]
  ! COMMA           [ reduce using rule 20 (exp -> exp NOTEQUAL exp .) ]


state 71

    (21) exp -> exp EQUALEQUAL exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 21 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 21 (exp -> exp EQUALEQUAL exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! POWER           [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! AND             [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! OR              [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]
  ! COMMA           [ reduce using rule 21 (exp -> exp EQUALEQUAL exp .) ]


state 72

    (22) exp -> exp AND exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 22 (exp -> exp AND exp .)
    RPAREN          reduce using rule 22 (exp -> exp AND exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! MODULUS         [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! POWER           [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! NOTEQUAL        [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! EQUALEQUAL      [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 22 (exp -> exp AND exp .) ]
  ! COMMA           [ reduce using rule 22 (exp -> exp AND exp .) ]


state 73

    (23) exp -> exp OR exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 23 (exp -> exp OR exp .)
    RPAREN          reduce using rule 23 (exp -> exp OR exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! MODULUS         [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! POWER           [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! NOTEQUAL        [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 23 (exp -> exp OR exp .) ]
  ! COMMA           [ reduce using rule 23 (exp -> exp OR exp .) ]


state 74

    (25) exp -> exp COMMA exp .
    (10) exp -> exp . PLUS exp
    (11) exp -> exp . MINUS exp
    (12) exp -> exp . DIVIDE exp
    (13) exp -> exp . MULTIPLY exp
    (14) exp -> exp . MODULUS exp
    (15) exp -> exp . POWER exp
    (16) exp -> exp . LESSTHAN exp
    (17) exp -> exp . GREATERTHAN exp
    (18) exp -> exp . GREATERTHANEQUALTO exp
    (19) exp -> exp . LESSTHANEQUALTO exp
    (20) exp -> exp . NOTEQUAL exp
    (21) exp -> exp . EQUALEQUAL exp
    (22) exp -> exp . AND exp
    (23) exp -> exp . OR exp
    (25) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 25 (exp -> exp COMMA exp .)
    RPAREN          reduce using rule 25 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DIVIDE          shift and go to state 41
    MULTIPLY        shift and go to state 42
    MODULUS         shift and go to state 43
    POWER           shift and go to state 44
    LESSTHAN        shift and go to state 45
    GREATERTHAN     shift and go to state 46
    GREATERTHANEQUALTO shift and go to state 47
    LESSTHANEQUALTO shift and go to state 48
    NOTEQUAL        shift and go to state 49
    EQUALEQUAL      shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    COMMA           shift and go to state 53

  ! PLUS            [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! MODULUS         [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! POWER           [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! NOTEQUAL        [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! EQUALEQUAL      [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 25 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 25 (exp -> exp COMMA exp .) ]


state 75

    (24) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GREATERTHANEQUALTO reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LESSTHANEQUALTO reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 24 (exp -> LPAREN exp RPAREN .)


state 76

    (6) stmt -> IF LPAREN exp RPAREN LCBRACKET . stmt RCBRACKET
    (2) stmt -> . NAME operator SEMICOLON
    (6) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (7) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (8) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (9) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (32) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (38) stmt -> . NAME EQUAL exp SEMICOLON
    (33) DTYPE -> . int
    (34) DTYPE -> . string
    (35) DTYPE -> . float
    (36) DTYPE -> . bool
    (37) DTYPE -> . char

    NAME            shift and go to state 3
    IF              shift and go to state 4
    ELIF            shift and go to state 5
    ELSE            shift and go to state 6
    PRINT           shift and go to state 7
    int             shift and go to state 9
    string          shift and go to state 10
    float           shift and go to state 11
    bool            shift and go to state 12
    char            shift and go to state 13

    stmt                           shift and go to state 80
    DTYPE                          shift and go to state 8

state 77

    (7) stmt -> ELIF LPAREN exp RPAREN LCBRACKET . stmt RCBRACKET
    (2) stmt -> . NAME operator SEMICOLON
    (6) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (7) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (8) stmt -> . ELSE LCBRACKET stmt RCBRACKET
    (9) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (32) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (38) stmt -> . NAME EQUAL exp SEMICOLON
    (33) DTYPE -> . int
    (34) DTYPE -> . string
    (35) DTYPE -> . float
    (36) DTYPE -> . bool
    (37) DTYPE -> . char

    NAME            shift and go to state 3
    IF              shift and go to state 4
    ELIF            shift and go to state 5
    ELSE            shift and go to state 6
    PRINT           shift and go to state 7
    int             shift and go to state 9
    string          shift and go to state 10
    float           shift and go to state 11
    bool            shift and go to state 12
    char            shift and go to state 13

    stmt                           shift and go to state 81
    DTYPE                          shift and go to state 8

state 78

    (9) stmt -> PRINT LPAREN exp RPAREN SEMICOLON .

    NAME            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELIF            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELSE            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    int             reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    string          reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    float           reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    bool            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    char            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    $end            reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    RCBRACKET       reduce using rule 9 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)


state 79

    (32) stmt -> DTYPE NAME EQUAL exp SEMICOLON .

    NAME            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 32 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)


state 80

    (6) stmt -> IF LPAREN exp RPAREN LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 82


state 81

    (7) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 83


state 82

    (6) stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .

    NAME            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 6 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)


state 83

    (7) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .

    NAME            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 7 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 60 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 60 resolved as shift
WARNING: shift/reduce conflict for POWER in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 61 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 61 resolved as shift
WARNING: shift/reduce conflict for POWER in state 61 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 61 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 61 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 62 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 62 resolved as shift
WARNING: shift/reduce conflict for POWER in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 64 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 64 resolved as shift
WARNING: shift/reduce conflict for POWER in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 64 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 65 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 65 resolved as shift
WARNING: shift/reduce conflict for POWER in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 65 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 66 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 66 resolved as shift
WARNING: shift/reduce conflict for POWER in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 66 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 67 resolved as shift
WARNING: shift/reduce conflict for POWER in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 68 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 68 resolved as shift
WARNING: shift/reduce conflict for POWER in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 69 resolved as shift
WARNING: shift/reduce conflict for POWER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 69 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 69 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 70 resolved as shift
WARNING: shift/reduce conflict for POWER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 70 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 71 resolved as shift
WARNING: shift/reduce conflict for POWER in state 71 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 71 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 71 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 72 resolved as shift
WARNING: shift/reduce conflict for POWER in state 72 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 73 resolved as shift
WARNING: shift/reduce conflict for POWER in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 74 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 74 resolved as shift
WARNING: shift/reduce conflict for POWER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 74 resolved as shift
