Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STEP

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     S -> <empty>
Rule 3     stmt -> STRUCT NAME LCBRACKET statement RCBRACKET
Rule 4     statement -> DTYPE NAME SEMICOLON statement
Rule 5     statement -> <empty>
Rule 6     stmt -> NAME NAME SEMICOLON
Rule 7     stmt -> NAME ARROW NAME EQUAL exp SEMICOLON
Rule 8     stmt -> NAME operator SEMICOLON
Rule 9     operator -> PLUSPLUS
Rule 10    operator -> MINUSMINUS
Rule 11    stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
Rule 12    stmt -> ELSE LCBRACKET stmts RCBRACKET
Rule 13    stmts -> stmt stmts
Rule 14    stmts -> <empty>
Rule 15    stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
Rule 16    stmt -> PRINT LPAREN exp RPAREN SEMICOLON
Rule 17    exp -> exp PLUS exp
Rule 18    exp -> exp MINUS exp
Rule 19    exp -> exp DIVIDE exp
Rule 20    exp -> exp MULTIPLY exp
Rule 21    exp -> exp MODULUS exp
Rule 22    exp -> exp POWER exp
Rule 23    exp -> exp LESSTHAN exp
Rule 24    exp -> exp GREATERTHAN exp
Rule 25    exp -> exp GREATERTHANEQUALTO exp
Rule 26    exp -> exp LESSTHANEQUALTO exp
Rule 27    exp -> exp NOTEQUAL exp
Rule 28    exp -> exp EQUALEQUAL exp
Rule 29    exp -> exp AND exp
Rule 30    exp -> exp OR exp
Rule 31    exp -> NAME ARROW NAME
Rule 32    exp -> LPAREN exp RPAREN
Rule 33    exp -> NOT exp
Rule 34    exp -> MINUS INT
Rule 35    exp -> MINUS NAME
Rule 36    exp -> exp COMMA exp
Rule 37    exp -> INT
Rule 38    exp -> FLOAT
Rule 39    exp -> STRING
Rule 40    exp -> CHAR
Rule 41    exp -> BOOL
Rule 42    exp -> NAME
Rule 43    stmt -> DTYPE NAME EQUAL exp SEMICOLON
Rule 44    DTYPE -> int
Rule 45    DTYPE -> string
Rule 46    DTYPE -> float
Rule 47    DTYPE -> bool
Rule 48    DTYPE -> char
Rule 49    stmt -> NAME EQUAL exp SEMICOLON
Rule 50    stmt -> FOR NAME EQUAL FROM TO END stmts NEXT
Rule 51    FROM -> INT
Rule 52    FROM -> NAME
Rule 53    END -> INT
Rule 54    END -> NAME

Terminals, with rules where they appear

AND                  : 29
ARROW                : 7 31
BOOL                 : 41
CHAR                 : 40
COMMA                : 36
DIVIDE               : 19
ELIF                 : 15
ELSE                 : 12
EQUAL                : 7 43 49 50
EQUALEQUAL           : 28
FLOAT                : 38
FOR                  : 50
GREATERTHAN          : 24
GREATERTHANEQUALTO   : 25
IF                   : 11
INT                  : 34 37 51 53
LCBRACKET            : 3 11 12 15
LESSTHAN             : 23
LESSTHANEQUALTO      : 26
LPAREN               : 11 15 16 32
MINUS                : 18 34 35
MINUSMINUS           : 10
MODULUS              : 21
MULTIPLY             : 20
NAME                 : 3 4 6 6 7 7 8 31 31 35 42 43 49 50 52 54
NEXT                 : 50
NOT                  : 33
NOTEQUAL             : 27
OR                   : 30
PLUS                 : 17
PLUSPLUS             : 9
POWER                : 22
PRINT                : 16
RCBRACKET            : 3 11 12 15
RPAREN               : 11 15 16 32
SEMICOLON            : 4 6 7 8 16 43 49
STEP                 : 
STRING               : 39
STRUCT               : 3
TO                   : 50
bool                 : 47
char                 : 48
error                : 
float                : 46
int                  : 44
string               : 45

Nonterminals, with rules where they appear

DTYPE                : 4 43
END                  : 50
FROM                 : 50
S                    : 1 0
exp                  : 7 11 15 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 32 33 36 36 43 49
operator             : 8
statement            : 3 4
stmt                 : 1 13 15
stmts                : 11 12 13 50

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    S                              shift and go to state 1
    stmt                           shift and go to state 2
    DTYPE                          shift and go to state 9

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (2) S -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    $end            reduce using rule 2 (S -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 2
    S                              shift and go to state 16
    DTYPE                          shift and go to state 9

state 3

    (3) stmt -> STRUCT . NAME LCBRACKET statement RCBRACKET

    NAME            shift and go to state 17


state 4

    (6) stmt -> NAME . NAME SEMICOLON
    (7) stmt -> NAME . ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> NAME . operator SEMICOLON
    (49) stmt -> NAME . EQUAL exp SEMICOLON
    (9) operator -> . PLUSPLUS
    (10) operator -> . MINUSMINUS

    NAME            shift and go to state 18
    ARROW           shift and go to state 19
    EQUAL           shift and go to state 20
    PLUSPLUS        shift and go to state 22
    MINUSMINUS      shift and go to state 23

    operator                       shift and go to state 21

state 5

    (11) stmt -> IF . LPAREN exp RPAREN LCBRACKET stmts RCBRACKET

    LPAREN          shift and go to state 24


state 6

    (12) stmt -> ELSE . LCBRACKET stmts RCBRACKET

    LCBRACKET       shift and go to state 25


state 7

    (15) stmt -> ELIF . LPAREN exp RPAREN LCBRACKET stmt RCBRACKET

    LPAREN          shift and go to state 26


state 8

    (16) stmt -> PRINT . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 27


state 9

    (43) stmt -> DTYPE . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 28


state 10

    (50) stmt -> FOR . NAME EQUAL FROM TO END stmts NEXT

    NAME            shift and go to state 29


state 11

    (44) DTYPE -> int .

    NAME            reduce using rule 44 (DTYPE -> int .)


state 12

    (45) DTYPE -> string .

    NAME            reduce using rule 45 (DTYPE -> string .)


state 13

    (46) DTYPE -> float .

    NAME            reduce using rule 46 (DTYPE -> float .)


state 14

    (47) DTYPE -> bool .

    NAME            reduce using rule 47 (DTYPE -> bool .)


state 15

    (48) DTYPE -> char .

    NAME            reduce using rule 48 (DTYPE -> char .)


state 16

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)


state 17

    (3) stmt -> STRUCT NAME . LCBRACKET statement RCBRACKET

    LCBRACKET       shift and go to state 30


state 18

    (6) stmt -> NAME NAME . SEMICOLON

    SEMICOLON       shift and go to state 31


state 19

    (7) stmt -> NAME ARROW . NAME EQUAL exp SEMICOLON

    NAME            shift and go to state 32


state 20

    (49) stmt -> NAME EQUAL . exp SEMICOLON
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 34

state 21

    (8) stmt -> NAME operator . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (9) operator -> PLUSPLUS .

    SEMICOLON       reduce using rule 9 (operator -> PLUSPLUS .)


state 23

    (10) operator -> MINUSMINUS .

    SEMICOLON       reduce using rule 10 (operator -> MINUSMINUS .)


state 24

    (11) stmt -> IF LPAREN . exp RPAREN LCBRACKET stmts RCBRACKET
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 44

state 25

    (12) stmt -> ELSE LCBRACKET . stmts RCBRACKET
    (13) stmts -> . stmt stmts
    (14) stmts -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    RCBRACKET       reduce using rule 14 (stmts -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmts                          shift and go to state 45
    stmt                           shift and go to state 46
    DTYPE                          shift and go to state 9

state 26

    (15) stmt -> ELIF LPAREN . exp RPAREN LCBRACKET stmt RCBRACKET
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 47

state 27

    (16) stmt -> PRINT LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 48

state 28

    (43) stmt -> DTYPE NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 49


state 29

    (50) stmt -> FOR NAME . EQUAL FROM TO END stmts NEXT

    EQUAL           shift and go to state 50


state 30

    (3) stmt -> STRUCT NAME LCBRACKET . statement RCBRACKET
    (4) statement -> . DTYPE NAME SEMICOLON statement
    (5) statement -> .
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    RCBRACKET       reduce using rule 5 (statement -> .)
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    statement                      shift and go to state 51
    DTYPE                          shift and go to state 52

state 31

    (6) stmt -> NAME NAME SEMICOLON .

    STRUCT          reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    NAME            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    IF              reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    ELSE            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    ELIF            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    PRINT           reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    FOR             reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    int             reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    string          reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    float           reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    bool            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    char            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    $end            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    RCBRACKET       reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)
    NEXT            reduce using rule 6 (stmt -> NAME NAME SEMICOLON .)


state 32

    (7) stmt -> NAME ARROW NAME . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 53


state 33

    (31) exp -> NAME . ARROW NAME
    (42) exp -> NAME .

    ARROW           shift and go to state 54
    SEMICOLON       reduce using rule 42 (exp -> NAME .)
    PLUS            reduce using rule 42 (exp -> NAME .)
    MINUS           reduce using rule 42 (exp -> NAME .)
    DIVIDE          reduce using rule 42 (exp -> NAME .)
    MULTIPLY        reduce using rule 42 (exp -> NAME .)
    MODULUS         reduce using rule 42 (exp -> NAME .)
    POWER           reduce using rule 42 (exp -> NAME .)
    LESSTHAN        reduce using rule 42 (exp -> NAME .)
    GREATERTHAN     reduce using rule 42 (exp -> NAME .)
    GREATERTHANEQUALTO reduce using rule 42 (exp -> NAME .)
    LESSTHANEQUALTO reduce using rule 42 (exp -> NAME .)
    NOTEQUAL        reduce using rule 42 (exp -> NAME .)
    EQUALEQUAL      reduce using rule 42 (exp -> NAME .)
    AND             reduce using rule 42 (exp -> NAME .)
    OR              reduce using rule 42 (exp -> NAME .)
    COMMA           reduce using rule 42 (exp -> NAME .)
    RPAREN          reduce using rule 42 (exp -> NAME .)


state 34

    (49) stmt -> NAME EQUAL exp . SEMICOLON
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 35

    (34) exp -> MINUS . INT
    (35) exp -> MINUS . NAME

    INT             shift and go to state 71
    NAME            shift and go to state 72


state 36

    (32) exp -> LPAREN . exp RPAREN
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 73

state 37

    (33) exp -> NOT . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 74

state 38

    (37) exp -> INT .

    SEMICOLON       reduce using rule 37 (exp -> INT .)
    PLUS            reduce using rule 37 (exp -> INT .)
    MINUS           reduce using rule 37 (exp -> INT .)
    DIVIDE          reduce using rule 37 (exp -> INT .)
    MULTIPLY        reduce using rule 37 (exp -> INT .)
    MODULUS         reduce using rule 37 (exp -> INT .)
    POWER           reduce using rule 37 (exp -> INT .)
    LESSTHAN        reduce using rule 37 (exp -> INT .)
    GREATERTHAN     reduce using rule 37 (exp -> INT .)
    GREATERTHANEQUALTO reduce using rule 37 (exp -> INT .)
    LESSTHANEQUALTO reduce using rule 37 (exp -> INT .)
    NOTEQUAL        reduce using rule 37 (exp -> INT .)
    EQUALEQUAL      reduce using rule 37 (exp -> INT .)
    AND             reduce using rule 37 (exp -> INT .)
    OR              reduce using rule 37 (exp -> INT .)
    COMMA           reduce using rule 37 (exp -> INT .)
    RPAREN          reduce using rule 37 (exp -> INT .)


state 39

    (38) exp -> FLOAT .

    SEMICOLON       reduce using rule 38 (exp -> FLOAT .)
    PLUS            reduce using rule 38 (exp -> FLOAT .)
    MINUS           reduce using rule 38 (exp -> FLOAT .)
    DIVIDE          reduce using rule 38 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 38 (exp -> FLOAT .)
    MODULUS         reduce using rule 38 (exp -> FLOAT .)
    POWER           reduce using rule 38 (exp -> FLOAT .)
    LESSTHAN        reduce using rule 38 (exp -> FLOAT .)
    GREATERTHAN     reduce using rule 38 (exp -> FLOAT .)
    GREATERTHANEQUALTO reduce using rule 38 (exp -> FLOAT .)
    LESSTHANEQUALTO reduce using rule 38 (exp -> FLOAT .)
    NOTEQUAL        reduce using rule 38 (exp -> FLOAT .)
    EQUALEQUAL      reduce using rule 38 (exp -> FLOAT .)
    AND             reduce using rule 38 (exp -> FLOAT .)
    OR              reduce using rule 38 (exp -> FLOAT .)
    COMMA           reduce using rule 38 (exp -> FLOAT .)
    RPAREN          reduce using rule 38 (exp -> FLOAT .)


state 40

    (39) exp -> STRING .

    SEMICOLON       reduce using rule 39 (exp -> STRING .)
    PLUS            reduce using rule 39 (exp -> STRING .)
    MINUS           reduce using rule 39 (exp -> STRING .)
    DIVIDE          reduce using rule 39 (exp -> STRING .)
    MULTIPLY        reduce using rule 39 (exp -> STRING .)
    MODULUS         reduce using rule 39 (exp -> STRING .)
    POWER           reduce using rule 39 (exp -> STRING .)
    LESSTHAN        reduce using rule 39 (exp -> STRING .)
    GREATERTHAN     reduce using rule 39 (exp -> STRING .)
    GREATERTHANEQUALTO reduce using rule 39 (exp -> STRING .)
    LESSTHANEQUALTO reduce using rule 39 (exp -> STRING .)
    NOTEQUAL        reduce using rule 39 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 39 (exp -> STRING .)
    AND             reduce using rule 39 (exp -> STRING .)
    OR              reduce using rule 39 (exp -> STRING .)
    COMMA           reduce using rule 39 (exp -> STRING .)
    RPAREN          reduce using rule 39 (exp -> STRING .)


state 41

    (40) exp -> CHAR .

    SEMICOLON       reduce using rule 40 (exp -> CHAR .)
    PLUS            reduce using rule 40 (exp -> CHAR .)
    MINUS           reduce using rule 40 (exp -> CHAR .)
    DIVIDE          reduce using rule 40 (exp -> CHAR .)
    MULTIPLY        reduce using rule 40 (exp -> CHAR .)
    MODULUS         reduce using rule 40 (exp -> CHAR .)
    POWER           reduce using rule 40 (exp -> CHAR .)
    LESSTHAN        reduce using rule 40 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 40 (exp -> CHAR .)
    GREATERTHANEQUALTO reduce using rule 40 (exp -> CHAR .)
    LESSTHANEQUALTO reduce using rule 40 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 40 (exp -> CHAR .)
    EQUALEQUAL      reduce using rule 40 (exp -> CHAR .)
    AND             reduce using rule 40 (exp -> CHAR .)
    OR              reduce using rule 40 (exp -> CHAR .)
    COMMA           reduce using rule 40 (exp -> CHAR .)
    RPAREN          reduce using rule 40 (exp -> CHAR .)


state 42

    (41) exp -> BOOL .

    SEMICOLON       reduce using rule 41 (exp -> BOOL .)
    PLUS            reduce using rule 41 (exp -> BOOL .)
    MINUS           reduce using rule 41 (exp -> BOOL .)
    DIVIDE          reduce using rule 41 (exp -> BOOL .)
    MULTIPLY        reduce using rule 41 (exp -> BOOL .)
    MODULUS         reduce using rule 41 (exp -> BOOL .)
    POWER           reduce using rule 41 (exp -> BOOL .)
    LESSTHAN        reduce using rule 41 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 41 (exp -> BOOL .)
    GREATERTHANEQUALTO reduce using rule 41 (exp -> BOOL .)
    LESSTHANEQUALTO reduce using rule 41 (exp -> BOOL .)
    NOTEQUAL        reduce using rule 41 (exp -> BOOL .)
    EQUALEQUAL      reduce using rule 41 (exp -> BOOL .)
    AND             reduce using rule 41 (exp -> BOOL .)
    OR              reduce using rule 41 (exp -> BOOL .)
    COMMA           reduce using rule 41 (exp -> BOOL .)
    RPAREN          reduce using rule 41 (exp -> BOOL .)


state 43

    (8) stmt -> NAME operator SEMICOLON .

    STRUCT          reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    NAME            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    IF              reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    ELSE            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    ELIF            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    PRINT           reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    FOR             reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    int             reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    string          reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    float           reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    bool            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    char            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    $end            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    RCBRACKET       reduce using rule 8 (stmt -> NAME operator SEMICOLON .)
    NEXT            reduce using rule 8 (stmt -> NAME operator SEMICOLON .)


state 44

    (11) stmt -> IF LPAREN exp . RPAREN LCBRACKET stmts RCBRACKET
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 45

    (12) stmt -> ELSE LCBRACKET stmts . RCBRACKET

    RCBRACKET       shift and go to state 76


state 46

    (13) stmts -> stmt . stmts
    (13) stmts -> . stmt stmts
    (14) stmts -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    RCBRACKET       reduce using rule 14 (stmts -> .)
    NEXT            reduce using rule 14 (stmts -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 46
    stmts                          shift and go to state 77
    DTYPE                          shift and go to state 9

state 47

    (15) stmt -> ELIF LPAREN exp . RPAREN LCBRACKET stmt RCBRACKET
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 48

    (16) stmt -> PRINT LPAREN exp . RPAREN SEMICOLON
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    RPAREN          shift and go to state 79
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 49

    (43) stmt -> DTYPE NAME EQUAL . exp SEMICOLON
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 80

state 50

    (50) stmt -> FOR NAME EQUAL . FROM TO END stmts NEXT
    (51) FROM -> . INT
    (52) FROM -> . NAME

    INT             shift and go to state 83
    NAME            shift and go to state 81

    FROM                           shift and go to state 82

state 51

    (3) stmt -> STRUCT NAME LCBRACKET statement . RCBRACKET

    RCBRACKET       shift and go to state 84


state 52

    (4) statement -> DTYPE . NAME SEMICOLON statement

    NAME            shift and go to state 85


state 53

    (7) stmt -> NAME ARROW NAME EQUAL . exp SEMICOLON
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 86

state 54

    (31) exp -> NAME ARROW . NAME

    NAME            shift and go to state 87


state 55

    (49) stmt -> NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 49 (stmt -> NAME EQUAL exp SEMICOLON .)


state 56

    (17) exp -> exp PLUS . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 88

state 57

    (18) exp -> exp MINUS . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 89

state 58

    (19) exp -> exp DIVIDE . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 90

state 59

    (20) exp -> exp MULTIPLY . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 91

state 60

    (21) exp -> exp MODULUS . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 92

state 61

    (22) exp -> exp POWER . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 93

state 62

    (23) exp -> exp LESSTHAN . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 94

state 63

    (24) exp -> exp GREATERTHAN . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 95

state 64

    (25) exp -> exp GREATERTHANEQUALTO . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 96

state 65

    (26) exp -> exp LESSTHANEQUALTO . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 97

state 66

    (27) exp -> exp NOTEQUAL . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 98

state 67

    (28) exp -> exp EQUALEQUAL . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 99

state 68

    (29) exp -> exp AND . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 100

state 69

    (30) exp -> exp OR . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 101

state 70

    (36) exp -> exp COMMA . exp
    (17) exp -> . exp PLUS exp
    (18) exp -> . exp MINUS exp
    (19) exp -> . exp DIVIDE exp
    (20) exp -> . exp MULTIPLY exp
    (21) exp -> . exp MODULUS exp
    (22) exp -> . exp POWER exp
    (23) exp -> . exp LESSTHAN exp
    (24) exp -> . exp GREATERTHAN exp
    (25) exp -> . exp GREATERTHANEQUALTO exp
    (26) exp -> . exp LESSTHANEQUALTO exp
    (27) exp -> . exp NOTEQUAL exp
    (28) exp -> . exp EQUALEQUAL exp
    (29) exp -> . exp AND exp
    (30) exp -> . exp OR exp
    (31) exp -> . NAME ARROW NAME
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . NOT exp
    (34) exp -> . MINUS INT
    (35) exp -> . MINUS NAME
    (36) exp -> . exp COMMA exp
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . STRING
    (40) exp -> . CHAR
    (41) exp -> . BOOL
    (42) exp -> . NAME

    NAME            shift and go to state 33
    LPAREN          shift and go to state 36
    NOT             shift and go to state 37
    MINUS           shift and go to state 35
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    STRING          shift and go to state 40
    CHAR            shift and go to state 41
    BOOL            shift and go to state 42

    exp                            shift and go to state 102

state 71

    (34) exp -> MINUS INT .

    SEMICOLON       reduce using rule 34 (exp -> MINUS INT .)
    PLUS            reduce using rule 34 (exp -> MINUS INT .)
    MINUS           reduce using rule 34 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 34 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 34 (exp -> MINUS INT .)
    MODULUS         reduce using rule 34 (exp -> MINUS INT .)
    POWER           reduce using rule 34 (exp -> MINUS INT .)
    LESSTHAN        reduce using rule 34 (exp -> MINUS INT .)
    GREATERTHAN     reduce using rule 34 (exp -> MINUS INT .)
    GREATERTHANEQUALTO reduce using rule 34 (exp -> MINUS INT .)
    LESSTHANEQUALTO reduce using rule 34 (exp -> MINUS INT .)
    NOTEQUAL        reduce using rule 34 (exp -> MINUS INT .)
    EQUALEQUAL      reduce using rule 34 (exp -> MINUS INT .)
    AND             reduce using rule 34 (exp -> MINUS INT .)
    OR              reduce using rule 34 (exp -> MINUS INT .)
    COMMA           reduce using rule 34 (exp -> MINUS INT .)
    RPAREN          reduce using rule 34 (exp -> MINUS INT .)


state 72

    (35) exp -> MINUS NAME .

    SEMICOLON       reduce using rule 35 (exp -> MINUS NAME .)
    PLUS            reduce using rule 35 (exp -> MINUS NAME .)
    MINUS           reduce using rule 35 (exp -> MINUS NAME .)
    DIVIDE          reduce using rule 35 (exp -> MINUS NAME .)
    MULTIPLY        reduce using rule 35 (exp -> MINUS NAME .)
    MODULUS         reduce using rule 35 (exp -> MINUS NAME .)
    POWER           reduce using rule 35 (exp -> MINUS NAME .)
    LESSTHAN        reduce using rule 35 (exp -> MINUS NAME .)
    GREATERTHAN     reduce using rule 35 (exp -> MINUS NAME .)
    GREATERTHANEQUALTO reduce using rule 35 (exp -> MINUS NAME .)
    LESSTHANEQUALTO reduce using rule 35 (exp -> MINUS NAME .)
    NOTEQUAL        reduce using rule 35 (exp -> MINUS NAME .)
    EQUALEQUAL      reduce using rule 35 (exp -> MINUS NAME .)
    AND             reduce using rule 35 (exp -> MINUS NAME .)
    OR              reduce using rule 35 (exp -> MINUS NAME .)
    COMMA           reduce using rule 35 (exp -> MINUS NAME .)
    RPAREN          reduce using rule 35 (exp -> MINUS NAME .)


state 73

    (32) exp -> LPAREN exp . RPAREN
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 74

    (33) exp -> NOT exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 33 (exp -> NOT exp .)
    RPAREN          reduce using rule 33 (exp -> NOT exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 33 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> NOT exp .) ]
  ! DIVIDE          [ reduce using rule 33 (exp -> NOT exp .) ]
  ! MULTIPLY        [ reduce using rule 33 (exp -> NOT exp .) ]
  ! MODULUS         [ reduce using rule 33 (exp -> NOT exp .) ]
  ! POWER           [ reduce using rule 33 (exp -> NOT exp .) ]
  ! LESSTHAN        [ reduce using rule 33 (exp -> NOT exp .) ]
  ! GREATERTHAN     [ reduce using rule 33 (exp -> NOT exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 33 (exp -> NOT exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 33 (exp -> NOT exp .) ]
  ! NOTEQUAL        [ reduce using rule 33 (exp -> NOT exp .) ]
  ! EQUALEQUAL      [ reduce using rule 33 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 33 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 33 (exp -> NOT exp .) ]
  ! COMMA           [ reduce using rule 33 (exp -> NOT exp .) ]


state 75

    (11) stmt -> IF LPAREN exp RPAREN . LCBRACKET stmts RCBRACKET

    LCBRACKET       shift and go to state 104


state 76

    (12) stmt -> ELSE LCBRACKET stmts RCBRACKET .

    STRUCT          reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    NAME            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    IF              reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    ELSE            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    ELIF            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    PRINT           reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    FOR             reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    int             reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    string          reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    float           reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    bool            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    char            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    $end            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    RCBRACKET       reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)
    NEXT            reduce using rule 12 (stmt -> ELSE LCBRACKET stmts RCBRACKET .)


state 77

    (13) stmts -> stmt stmts .

    RCBRACKET       reduce using rule 13 (stmts -> stmt stmts .)
    NEXT            reduce using rule 13 (stmts -> stmt stmts .)


state 78

    (15) stmt -> ELIF LPAREN exp RPAREN . LCBRACKET stmt RCBRACKET

    LCBRACKET       shift and go to state 105


state 79

    (16) stmt -> PRINT LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 106


state 80

    (43) stmt -> DTYPE NAME EQUAL exp . SEMICOLON
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 107
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 81

    (52) FROM -> NAME .

    TO              reduce using rule 52 (FROM -> NAME .)


state 82

    (50) stmt -> FOR NAME EQUAL FROM . TO END stmts NEXT

    TO              shift and go to state 108


state 83

    (51) FROM -> INT .

    TO              reduce using rule 51 (FROM -> INT .)


state 84

    (3) stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .

    STRUCT          reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    NAME            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    IF              reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    ELSE            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    ELIF            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    PRINT           reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    FOR             reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    int             reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    string          reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    float           reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    bool            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    char            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    $end            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    RCBRACKET       reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)
    NEXT            reduce using rule 3 (stmt -> STRUCT NAME LCBRACKET statement RCBRACKET .)


state 85

    (4) statement -> DTYPE NAME . SEMICOLON statement

    SEMICOLON       shift and go to state 109


state 86

    (7) stmt -> NAME ARROW NAME EQUAL exp . SEMICOLON
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

    SEMICOLON       shift and go to state 110
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70


state 87

    (31) exp -> NAME ARROW NAME .

    SEMICOLON       reduce using rule 31 (exp -> NAME ARROW NAME .)
    PLUS            reduce using rule 31 (exp -> NAME ARROW NAME .)
    MINUS           reduce using rule 31 (exp -> NAME ARROW NAME .)
    DIVIDE          reduce using rule 31 (exp -> NAME ARROW NAME .)
    MULTIPLY        reduce using rule 31 (exp -> NAME ARROW NAME .)
    MODULUS         reduce using rule 31 (exp -> NAME ARROW NAME .)
    POWER           reduce using rule 31 (exp -> NAME ARROW NAME .)
    LESSTHAN        reduce using rule 31 (exp -> NAME ARROW NAME .)
    GREATERTHAN     reduce using rule 31 (exp -> NAME ARROW NAME .)
    GREATERTHANEQUALTO reduce using rule 31 (exp -> NAME ARROW NAME .)
    LESSTHANEQUALTO reduce using rule 31 (exp -> NAME ARROW NAME .)
    NOTEQUAL        reduce using rule 31 (exp -> NAME ARROW NAME .)
    EQUALEQUAL      reduce using rule 31 (exp -> NAME ARROW NAME .)
    AND             reduce using rule 31 (exp -> NAME ARROW NAME .)
    OR              reduce using rule 31 (exp -> NAME ARROW NAME .)
    COMMA           reduce using rule 31 (exp -> NAME ARROW NAME .)
    RPAREN          reduce using rule 31 (exp -> NAME ARROW NAME .)


state 88

    (17) exp -> exp PLUS exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 17 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! MULTIPLY        [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! MODULUS         [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! POWER           [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! LESSTHAN        [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! AND             [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! OR              [ reduce using rule 17 (exp -> exp PLUS exp .) ]
  ! COMMA           [ reduce using rule 17 (exp -> exp PLUS exp .) ]


state 89

    (18) exp -> exp MINUS exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 18 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 18 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! MODULUS         [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! POWER           [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! LESSTHAN        [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! AND             [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! OR              [ reduce using rule 18 (exp -> exp MINUS exp .) ]
  ! COMMA           [ reduce using rule 18 (exp -> exp MINUS exp .) ]


state 90

    (19) exp -> exp DIVIDE exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 19 (exp -> exp DIVIDE exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! LESSTHAN        [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHAN     [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! NOTEQUAL        [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! EQUALEQUAL      [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]
  ! COMMA           [ reduce using rule 19 (exp -> exp DIVIDE exp .) ]


state 91

    (20) exp -> exp MULTIPLY exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 20 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 20 (exp -> exp MULTIPLY exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHAN        [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHAN     [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! NOTEQUAL        [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! EQUALEQUAL      [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]
  ! COMMA           [ reduce using rule 20 (exp -> exp MULTIPLY exp .) ]


state 92

    (21) exp -> exp MODULUS exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 21 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 21 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! LESSTHAN        [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 21 (exp -> exp MODULUS exp .) ]
  ! COMMA           [ reduce using rule 21 (exp -> exp MODULUS exp .) ]


state 93

    (22) exp -> exp POWER exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 22 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 22 (exp -> exp POWER exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! LESSTHAN        [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! GREATERTHAN     [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! EQUALEQUAL      [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 22 (exp -> exp POWER exp .) ]
  ! COMMA           [ reduce using rule 22 (exp -> exp POWER exp .) ]


state 94

    (23) exp -> exp LESSTHAN exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 23 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 23 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! MODULUS         [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! POWER           [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]
  ! COMMA           [ reduce using rule 23 (exp -> exp LESSTHAN exp .) ]


state 95

    (24) exp -> exp GREATERTHAN exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 24 (exp -> exp GREATERTHAN exp .)
    RPAREN          reduce using rule 24 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! MODULUS         [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! POWER           [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! EQUALEQUAL      [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! AND             [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! OR              [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]
  ! COMMA           [ reduce using rule 24 (exp -> exp GREATERTHAN exp .) ]


state 96

    (25) exp -> exp GREATERTHANEQUALTO exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .)
    RPAREN          reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 25 (exp -> exp GREATERTHANEQUALTO exp .) ]


state 97

    (26) exp -> exp LESSTHANEQUALTO exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .)
    RPAREN          reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! MODULUS         [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! POWER           [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! NOTEQUAL        [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! EQUALEQUAL      [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! AND             [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! OR              [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]
  ! COMMA           [ reduce using rule 26 (exp -> exp LESSTHANEQUALTO exp .) ]


state 98

    (27) exp -> exp NOTEQUAL exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 27 (exp -> exp NOTEQUAL exp .)
    RPAREN          reduce using rule 27 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! POWER           [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]
  ! COMMA           [ reduce using rule 27 (exp -> exp NOTEQUAL exp .) ]


state 99

    (28) exp -> exp EQUALEQUAL exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 28 (exp -> exp EQUALEQUAL exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! MODULUS         [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! POWER           [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! EQUALEQUAL      [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! AND             [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! OR              [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]
  ! COMMA           [ reduce using rule 28 (exp -> exp EQUALEQUAL exp .) ]


state 100

    (29) exp -> exp AND exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 29 (exp -> exp AND exp .)
    RPAREN          reduce using rule 29 (exp -> exp AND exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! MODULUS         [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! POWER           [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! NOTEQUAL        [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! EQUALEQUAL      [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 29 (exp -> exp AND exp .) ]
  ! COMMA           [ reduce using rule 29 (exp -> exp AND exp .) ]


state 101

    (30) exp -> exp OR exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 30 (exp -> exp OR exp .)
    RPAREN          reduce using rule 30 (exp -> exp OR exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! MODULUS         [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! POWER           [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! NOTEQUAL        [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 30 (exp -> exp OR exp .) ]
  ! COMMA           [ reduce using rule 30 (exp -> exp OR exp .) ]


state 102

    (36) exp -> exp COMMA exp .
    (17) exp -> exp . PLUS exp
    (18) exp -> exp . MINUS exp
    (19) exp -> exp . DIVIDE exp
    (20) exp -> exp . MULTIPLY exp
    (21) exp -> exp . MODULUS exp
    (22) exp -> exp . POWER exp
    (23) exp -> exp . LESSTHAN exp
    (24) exp -> exp . GREATERTHAN exp
    (25) exp -> exp . GREATERTHANEQUALTO exp
    (26) exp -> exp . LESSTHANEQUALTO exp
    (27) exp -> exp . NOTEQUAL exp
    (28) exp -> exp . EQUALEQUAL exp
    (29) exp -> exp . AND exp
    (30) exp -> exp . OR exp
    (36) exp -> exp . COMMA exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 36 (exp -> exp COMMA exp .)
    RPAREN          reduce using rule 36 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    DIVIDE          shift and go to state 58
    MULTIPLY        shift and go to state 59
    MODULUS         shift and go to state 60
    POWER           shift and go to state 61
    LESSTHAN        shift and go to state 62
    GREATERTHAN     shift and go to state 63
    GREATERTHANEQUALTO shift and go to state 64
    LESSTHANEQUALTO shift and go to state 65
    NOTEQUAL        shift and go to state 66
    EQUALEQUAL      shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    COMMA           shift and go to state 70

  ! PLUS            [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! DIVIDE          [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! MULTIPLY        [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! MODULUS         [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! POWER           [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! GREATERTHANEQUALTO [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! LESSTHANEQUALTO [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! NOTEQUAL        [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! EQUALEQUAL      [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 36 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 36 (exp -> exp COMMA exp .) ]


state 103

    (32) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    GREATERTHANEQUALTO reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    LESSTHANEQUALTO reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 32 (exp -> LPAREN exp RPAREN .)


state 104

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET . stmts RCBRACKET
    (13) stmts -> . stmt stmts
    (14) stmts -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    RCBRACKET       reduce using rule 14 (stmts -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmts                          shift and go to state 111
    stmt                           shift and go to state 46
    DTYPE                          shift and go to state 9

state 105

    (15) stmt -> ELIF LPAREN exp RPAREN LCBRACKET . stmt RCBRACKET
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmt                           shift and go to state 112
    DTYPE                          shift and go to state 9

state 106

    (16) stmt -> PRINT LPAREN exp RPAREN SEMICOLON .

    STRUCT          reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    NAME            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELSE            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    ELIF            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    int             reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    string          reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    float           reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    bool            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    char            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    $end            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    RCBRACKET       reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)
    NEXT            reduce using rule 16 (stmt -> PRINT LPAREN exp RPAREN SEMICOLON .)


state 107

    (43) stmt -> DTYPE NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 43 (stmt -> DTYPE NAME EQUAL exp SEMICOLON .)


state 108

    (50) stmt -> FOR NAME EQUAL FROM TO . END stmts NEXT
    (53) END -> . INT
    (54) END -> . NAME

    INT             shift and go to state 115
    NAME            shift and go to state 113

    END                            shift and go to state 114

state 109

    (4) statement -> DTYPE NAME SEMICOLON . statement
    (4) statement -> . DTYPE NAME SEMICOLON statement
    (5) statement -> .
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    RCBRACKET       reduce using rule 5 (statement -> .)
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    DTYPE                          shift and go to state 52
    statement                      shift and go to state 116

state 110

    (7) stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .

    STRUCT          reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    NAME            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    IF              reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    ELIF            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    PRINT           reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    FOR             reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    int             reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    string          reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    float           reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    bool            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    char            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    $end            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    RCBRACKET       reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)
    NEXT            reduce using rule 7 (stmt -> NAME ARROW NAME EQUAL exp SEMICOLON .)


state 111

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET stmts . RCBRACKET

    RCBRACKET       shift and go to state 117


state 112

    (15) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt . RCBRACKET

    RCBRACKET       shift and go to state 118


state 113

    (54) END -> NAME .

    STRUCT          reduce using rule 54 (END -> NAME .)
    NAME            reduce using rule 54 (END -> NAME .)
    IF              reduce using rule 54 (END -> NAME .)
    ELSE            reduce using rule 54 (END -> NAME .)
    ELIF            reduce using rule 54 (END -> NAME .)
    PRINT           reduce using rule 54 (END -> NAME .)
    FOR             reduce using rule 54 (END -> NAME .)
    int             reduce using rule 54 (END -> NAME .)
    string          reduce using rule 54 (END -> NAME .)
    float           reduce using rule 54 (END -> NAME .)
    bool            reduce using rule 54 (END -> NAME .)
    char            reduce using rule 54 (END -> NAME .)
    NEXT            reduce using rule 54 (END -> NAME .)


state 114

    (50) stmt -> FOR NAME EQUAL FROM TO END . stmts NEXT
    (13) stmts -> . stmt stmts
    (14) stmts -> .
    (3) stmt -> . STRUCT NAME LCBRACKET statement RCBRACKET
    (6) stmt -> . NAME NAME SEMICOLON
    (7) stmt -> . NAME ARROW NAME EQUAL exp SEMICOLON
    (8) stmt -> . NAME operator SEMICOLON
    (11) stmt -> . IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET
    (12) stmt -> . ELSE LCBRACKET stmts RCBRACKET
    (15) stmt -> . ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET
    (16) stmt -> . PRINT LPAREN exp RPAREN SEMICOLON
    (43) stmt -> . DTYPE NAME EQUAL exp SEMICOLON
    (49) stmt -> . NAME EQUAL exp SEMICOLON
    (50) stmt -> . FOR NAME EQUAL FROM TO END stmts NEXT
    (44) DTYPE -> . int
    (45) DTYPE -> . string
    (46) DTYPE -> . float
    (47) DTYPE -> . bool
    (48) DTYPE -> . char

    NEXT            reduce using rule 14 (stmts -> .)
    STRUCT          shift and go to state 3
    NAME            shift and go to state 4
    IF              shift and go to state 5
    ELSE            shift and go to state 6
    ELIF            shift and go to state 7
    PRINT           shift and go to state 8
    FOR             shift and go to state 10
    int             shift and go to state 11
    string          shift and go to state 12
    float           shift and go to state 13
    bool            shift and go to state 14
    char            shift and go to state 15

    stmts                          shift and go to state 119
    stmt                           shift and go to state 46
    DTYPE                          shift and go to state 9

state 115

    (53) END -> INT .

    STRUCT          reduce using rule 53 (END -> INT .)
    NAME            reduce using rule 53 (END -> INT .)
    IF              reduce using rule 53 (END -> INT .)
    ELSE            reduce using rule 53 (END -> INT .)
    ELIF            reduce using rule 53 (END -> INT .)
    PRINT           reduce using rule 53 (END -> INT .)
    FOR             reduce using rule 53 (END -> INT .)
    int             reduce using rule 53 (END -> INT .)
    string          reduce using rule 53 (END -> INT .)
    float           reduce using rule 53 (END -> INT .)
    bool            reduce using rule 53 (END -> INT .)
    char            reduce using rule 53 (END -> INT .)
    NEXT            reduce using rule 53 (END -> INT .)


state 116

    (4) statement -> DTYPE NAME SEMICOLON statement .

    RCBRACKET       reduce using rule 4 (statement -> DTYPE NAME SEMICOLON statement .)


state 117

    (11) stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .

    STRUCT          reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    NAME            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    IF              reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    ELSE            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    ELIF            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    PRINT           reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    FOR             reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    int             reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    string          reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    float           reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    bool            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    char            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    $end            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    RCBRACKET       reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)
    NEXT            reduce using rule 11 (stmt -> IF LPAREN exp RPAREN LCBRACKET stmts RCBRACKET .)


state 118

    (15) stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .

    STRUCT          reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NAME            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    IF              reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELSE            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    ELIF            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    PRINT           reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    FOR             reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    int             reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    string          reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    float           reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    bool            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    char            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    $end            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    RCBRACKET       reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)
    NEXT            reduce using rule 15 (stmt -> ELIF LPAREN exp RPAREN LCBRACKET stmt RCBRACKET .)


state 119

    (50) stmt -> FOR NAME EQUAL FROM TO END stmts . NEXT

    NEXT            shift and go to state 120


state 120

    (50) stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .

    STRUCT          reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    NAME            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    IF              reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    ELSE            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    ELIF            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    PRINT           reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    FOR             reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    int             reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    string          reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    float           reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    bool            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    char            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    $end            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    RCBRACKET       reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)
    NEXT            reduce using rule 50 (stmt -> FOR NAME EQUAL FROM TO END stmts NEXT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 74 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 74 resolved as shift
WARNING: shift/reduce conflict for POWER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 88 resolved as shift
WARNING: shift/reduce conflict for POWER in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 88 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 89 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 89 resolved as shift
WARNING: shift/reduce conflict for POWER in state 89 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 89 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 89 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 90 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 90 resolved as shift
WARNING: shift/reduce conflict for POWER in state 90 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 90 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 90 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 91 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 91 resolved as shift
WARNING: shift/reduce conflict for POWER in state 91 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 91 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 91 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 92 resolved as shift
WARNING: shift/reduce conflict for POWER in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 92 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 93 resolved as shift
WARNING: shift/reduce conflict for POWER in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 94 resolved as shift
WARNING: shift/reduce conflict for POWER in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 94 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 95 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 95 resolved as shift
WARNING: shift/reduce conflict for POWER in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 95 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 96 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 96 resolved as shift
WARNING: shift/reduce conflict for POWER in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 96 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 97 resolved as shift
WARNING: shift/reduce conflict for POWER in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 98 resolved as shift
WARNING: shift/reduce conflict for POWER in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 99 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 99 resolved as shift
WARNING: shift/reduce conflict for POWER in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 99 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 100 resolved as shift
WARNING: shift/reduce conflict for POWER in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 101 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 101 resolved as shift
WARNING: shift/reduce conflict for POWER in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 101 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 102 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 102 resolved as shift
WARNING: shift/reduce conflict for POWER in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALTO in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALTO in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 102 resolved as shift
